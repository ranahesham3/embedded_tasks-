
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002e9e  00002f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080008c  0080008c  00002f5e  2**0
                  ALLOC
  3 .stab         00002b74  00000000  00000000  00002f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d67  00000000  00000000  00005ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000683b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000697b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008734  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000961f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__vector_1>
       8:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__vector_2>
       c:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 14 	call	0x2802	; 0x2802 <main>
      8a:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:




ES_t DIO_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8b ef       	ldi	r24, 0xFB	; 251
     b60:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     b62:	e4 e3       	ldi	r30, 0x34	; 52
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     b6a:	e1 e3       	ldi	r30, 0x31	; 49
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	83 ef       	ldi	r24, 0xF3	; 243
     b70:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTB =CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     b78:	e8 e3       	ldi	r30, 0x38	; 56
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	84 e0       	ldi	r24, 0x04	; 4
     b7e:	80 83       	st	Z, r24
	PORTC =CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     b80:	e5 e3       	ldi	r30, 0x35	; 53
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
	PORTD =CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     b86:	e2 e3       	ldi	r30, 0x32	; 50
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	8c e0       	ldi	r24, 0x0C	; 12
     b8c:	80 83       	st	Z, r24

	Local_enuErrorstate = ES_OK;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
     b92:	89 81       	ldd	r24, Y+1	; 0x01
}
     b94:	0f 90       	pop	r0
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <DIO_enuSetPortDirection>:



ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8Value)
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <DIO_enuSetPortDirection+0x6>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <DIO_enuSetPortDirection+0x8>
     ba4:	0f 92       	push	r0
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	8a 83       	std	Y+2, r24	; 0x02
     bac:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     bae:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID<=DIO_PORTD)
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	a8 f5       	brcc	.+106    	; 0xc20 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	3d 83       	std	Y+5, r19	; 0x05
     bbe:	2c 83       	std	Y+4, r18	; 0x04
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	9d 81       	ldd	r25, Y+5	; 0x05
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	d1 f0       	breq	.+52     	; 0xbfe <DIO_enuSetPortDirection+0x62>
     bca:	2c 81       	ldd	r18, Y+4	; 0x04
     bcc:	3d 81       	ldd	r19, Y+5	; 0x05
     bce:	22 30       	cpi	r18, 0x02	; 2
     bd0:	31 05       	cpc	r19, r1
     bd2:	2c f4       	brge	.+10     	; 0xbde <DIO_enuSetPortDirection+0x42>
     bd4:	8c 81       	ldd	r24, Y+4	; 0x04
     bd6:	9d 81       	ldd	r25, Y+5	; 0x05
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	61 f0       	breq	.+24     	; 0xbf4 <DIO_enuSetPortDirection+0x58>
     bdc:	1e c0       	rjmp	.+60     	; 0xc1a <DIO_enuSetPortDirection+0x7e>
     bde:	2c 81       	ldd	r18, Y+4	; 0x04
     be0:	3d 81       	ldd	r19, Y+5	; 0x05
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	81 f0       	breq	.+32     	; 0xc08 <DIO_enuSetPortDirection+0x6c>
     be8:	8c 81       	ldd	r24, Y+4	; 0x04
     bea:	9d 81       	ldd	r25, Y+5	; 0x05
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	91 05       	cpc	r25, r1
     bf0:	81 f0       	breq	.+32     	; 0xc12 <DIO_enuSetPortDirection+0x76>
     bf2:	13 c0       	rjmp	.+38     	; 0xc1a <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
     bf4:	ea e3       	ldi	r30, 0x3A	; 58
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	80 83       	st	Z, r24
     bfc:	0e c0       	rjmp	.+28     	; 0xc1a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
     bfe:	e7 e3       	ldi	r30, 0x37	; 55
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	80 83       	st	Z, r24
     c06:	09 c0       	rjmp	.+18     	; 0xc1a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
     c08:	e4 e3       	ldi	r30, 0x34	; 52
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	80 83       	st	Z, r24
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
     c12:	e1 e3       	ldi	r30, 0x31	; 49
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate=ES_OK;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     c20:	83 e0       	ldi	r24, 0x03	; 3
     c22:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
}
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <DIO_enuSetPortValue>:



ES_t DIO_enuSetPortValue(u8 Copy_u8PortID,u8 Copy_u8Value)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <DIO_enuSetPortValue+0x6>
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <DIO_enuSetPortValue+0x8>
     c3e:	0f 92       	push	r0
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	8a 83       	std	Y+2, r24	; 0x02
     c46:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     c48:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID<=DIO_PORTD)
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	84 30       	cpi	r24, 0x04	; 4
     c4e:	a8 f5       	brcc	.+106    	; 0xcba <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3d 83       	std	Y+5, r19	; 0x05
     c58:	2c 83       	std	Y+4, r18	; 0x04
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	9d 81       	ldd	r25, Y+5	; 0x05
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	91 05       	cpc	r25, r1
     c62:	d1 f0       	breq	.+52     	; 0xc98 <DIO_enuSetPortValue+0x62>
     c64:	2c 81       	ldd	r18, Y+4	; 0x04
     c66:	3d 81       	ldd	r19, Y+5	; 0x05
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	31 05       	cpc	r19, r1
     c6c:	2c f4       	brge	.+10     	; 0xc78 <DIO_enuSetPortValue+0x42>
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	9d 81       	ldd	r25, Y+5	; 0x05
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	61 f0       	breq	.+24     	; 0xc8e <DIO_enuSetPortValue+0x58>
     c76:	1e c0       	rjmp	.+60     	; 0xcb4 <DIO_enuSetPortValue+0x7e>
     c78:	2c 81       	ldd	r18, Y+4	; 0x04
     c7a:	3d 81       	ldd	r19, Y+5	; 0x05
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	81 f0       	breq	.+32     	; 0xca2 <DIO_enuSetPortValue+0x6c>
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	9d 81       	ldd	r25, Y+5	; 0x05
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	91 05       	cpc	r25, r1
     c8a:	81 f0       	breq	.+32     	; 0xcac <DIO_enuSetPortValue+0x76>
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
     c8e:	eb e3       	ldi	r30, 0x3B	; 59
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	80 83       	st	Z, r24
     c96:	0e c0       	rjmp	.+28     	; 0xcb4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
     c98:	e8 e3       	ldi	r30, 0x38	; 56
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	80 83       	st	Z, r24
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
     ca2:	e5 e3       	ldi	r30, 0x35	; 53
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	80 83       	st	Z, r24
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
     cac:	e2 e3       	ldi	r30, 0x32	; 50
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate=ES_OK;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <DIO_enuTogPortValue>:



ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <DIO_enuTogPortValue+0x6>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <DIO_enuTogPortValue+0x8>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
     cde:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID<=DIO_PORTD)
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	84 30       	cpi	r24, 0x04	; 4
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <DIO_enuTogPortValue+0x18>
     ce6:	41 c0       	rjmp	.+130    	; 0xd6a <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	3c 83       	std	Y+4, r19	; 0x04
     cf0:	2b 83       	std	Y+3, r18	; 0x03
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 05       	cpc	r25, r1
     cfa:	e9 f0       	breq	.+58     	; 0xd36 <DIO_enuTogPortValue+0x66>
     cfc:	2b 81       	ldd	r18, Y+3	; 0x03
     cfe:	3c 81       	ldd	r19, Y+4	; 0x04
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	2c f4       	brge	.+10     	; 0xd10 <DIO_enuTogPortValue+0x40>
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	61 f0       	breq	.+24     	; 0xd26 <DIO_enuTogPortValue+0x56>
     d0e:	2a c0       	rjmp	.+84     	; 0xd64 <DIO_enuTogPortValue+0x94>
     d10:	2b 81       	ldd	r18, Y+3	; 0x03
     d12:	3c 81       	ldd	r19, Y+4	; 0x04
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	b1 f0       	breq	.+44     	; 0xd46 <DIO_enuTogPortValue+0x76>
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	91 05       	cpc	r25, r1
     d22:	c9 f0       	breq	.+50     	; 0xd56 <DIO_enuTogPortValue+0x86>
     d24:	1f c0       	rjmp	.+62     	; 0xd64 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
     d26:	ab e3       	ldi	r26, 0x3B	; 59
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	eb e3       	ldi	r30, 0x3B	; 59
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 95       	com	r24
     d32:	8c 93       	st	X, r24
     d34:	17 c0       	rjmp	.+46     	; 0xd64 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
     d36:	a8 e3       	ldi	r26, 0x38	; 56
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e8 e3       	ldi	r30, 0x38	; 56
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	80 95       	com	r24
     d42:	8c 93       	st	X, r24
     d44:	0f c0       	rjmp	.+30     	; 0xd64 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
     d46:	a5 e3       	ldi	r26, 0x35	; 53
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e3       	ldi	r30, 0x35	; 53
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 95       	com	r24
     d52:	8c 93       	st	X, r24
     d54:	07 c0       	rjmp	.+14     	; 0xd64 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
     d56:	a2 e3       	ldi	r26, 0x32	; 50
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e2 e3       	ldi	r30, 0x32	; 50
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 95       	com	r24
     d62:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate=ES_OK;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <DIO_enuGetPortValue>:



ES_t DIO_enuGetPortValue(u8 Copy_u8PortID,u8* Copy_pu8Value)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <DIO_enuGetPortValue+0x6>
     d84:	00 d0       	rcall	.+0      	; 0xd86 <DIO_enuGetPortValue+0x8>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <DIO_enuGetPortValue+0xa>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	8a 83       	std	Y+2, r24	; 0x02
     d8e:	7c 83       	std	Y+4, r23	; 0x04
     d90:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     d92:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	09 f4       	brne	.+2      	; 0xd9e <DIO_enuGetPortValue+0x20>
     d9c:	43 c0       	rjmp	.+134    	; 0xe24 <DIO_enuGetPortValue+0xa6>
	{
		if( Copy_u8PortID<=DIO_PORTD)
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	84 30       	cpi	r24, 0x04	; 4
     da2:	e8 f5       	brcc	.+122    	; 0xe1e <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3e 83       	std	Y+6, r19	; 0x06
     dac:	2d 83       	std	Y+5, r18	; 0x05
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	91 05       	cpc	r25, r1
     db6:	e1 f0       	breq	.+56     	; 0xdf0 <DIO_enuGetPortValue+0x72>
     db8:	2d 81       	ldd	r18, Y+5	; 0x05
     dba:	3e 81       	ldd	r19, Y+6	; 0x06
     dbc:	22 30       	cpi	r18, 0x02	; 2
     dbe:	31 05       	cpc	r19, r1
     dc0:	2c f4       	brge	.+10     	; 0xdcc <DIO_enuGetPortValue+0x4e>
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	61 f0       	breq	.+24     	; 0xde2 <DIO_enuGetPortValue+0x64>
     dca:	26 c0       	rjmp	.+76     	; 0xe18 <DIO_enuGetPortValue+0x9a>
     dcc:	2d 81       	ldd	r18, Y+5	; 0x05
     dce:	3e 81       	ldd	r19, Y+6	; 0x06
     dd0:	22 30       	cpi	r18, 0x02	; 2
     dd2:	31 05       	cpc	r19, r1
     dd4:	a1 f0       	breq	.+40     	; 0xdfe <DIO_enuGetPortValue+0x80>
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
     dd8:	9e 81       	ldd	r25, Y+6	; 0x06
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	91 05       	cpc	r25, r1
     dde:	b1 f0       	breq	.+44     	; 0xe0c <DIO_enuGetPortValue+0x8e>
     de0:	1b c0       	rjmp	.+54     	; 0xe18 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PORTA;
     de2:	eb e3       	ldi	r30, 0x3B	; 59
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	80 83       	st	Z, r24
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PORTB;
     df0:	e8 e3       	ldi	r30, 0x38	; 56
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	eb 81       	ldd	r30, Y+3	; 0x03
     df8:	fc 81       	ldd	r31, Y+4	; 0x04
     dfa:	80 83       	st	Z, r24
     dfc:	0d c0       	rjmp	.+26     	; 0xe18 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PORTC;
     dfe:	e5 e3       	ldi	r30, 0x35	; 53
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	eb 81       	ldd	r30, Y+3	; 0x03
     e06:	fc 81       	ldd	r31, Y+4	; 0x04
     e08:	80 83       	st	Z, r24
     e0a:	06 c0       	rjmp	.+12     	; 0xe18 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PORTD;
     e0c:	e2 e3       	ldi	r30, 0x32	; 50
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	eb 81       	ldd	r30, Y+3	; 0x03
     e14:	fc 81       	ldd	r31, Y+4	; 0x04
     e16:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2a:	26 96       	adiw	r28, 0x06	; 6
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <DIO_enuSetPinDirection>:



ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8Value)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_enuSetPinDirection+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <DIO_enuSetPinDirection+0x8>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <DIO_enuSetPinDirection+0xa>
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	8a 83       	std	Y+2, r24	; 0x02
     e4c:	6b 83       	std	Y+3, r22	; 0x03
     e4e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
     e50:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD &&
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	08 f0       	brcs	.+2      	; 0xe5a <DIO_enuSetPinDirection+0x1e>
     e58:	d1 c0       	rjmp	.+418    	; 0xffc <DIO_enuSetPinDirection+0x1c0>
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	88 30       	cpi	r24, 0x08	; 8
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <DIO_enuSetPinDirection+0x26>
     e60:	cd c0       	rjmp	.+410    	; 0xffc <DIO_enuSetPinDirection+0x1c0>
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	08 f0       	brcs	.+2      	; 0xe6a <DIO_enuSetPinDirection+0x2e>
     e68:	c9 c0       	rjmp	.+402    	; 0xffc <DIO_enuSetPinDirection+0x1c0>
	   Copy_u8PinID<=DIO_PIN7 &&
	   Copy_u8Value<=OUTPUT)
	{
		switch(Copy_u8PortID)
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	3e 83       	std	Y+6, r19	; 0x06
     e72:	2d 83       	std	Y+5, r18	; 0x05
     e74:	6d 81       	ldd	r22, Y+5	; 0x05
     e76:	7e 81       	ldd	r23, Y+6	; 0x06
     e78:	61 30       	cpi	r22, 0x01	; 1
     e7a:	71 05       	cpc	r23, r1
     e7c:	09 f4       	brne	.+2      	; 0xe80 <DIO_enuSetPinDirection+0x44>
     e7e:	41 c0       	rjmp	.+130    	; 0xf02 <DIO_enuSetPinDirection+0xc6>
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	91 05       	cpc	r25, r1
     e88:	34 f4       	brge	.+12     	; 0xe96 <DIO_enuSetPinDirection+0x5a>
     e8a:	2d 81       	ldd	r18, Y+5	; 0x05
     e8c:	3e 81       	ldd	r19, Y+6	; 0x06
     e8e:	21 15       	cp	r18, r1
     e90:	31 05       	cpc	r19, r1
     e92:	71 f0       	breq	.+28     	; 0xeb0 <DIO_enuSetPinDirection+0x74>
     e94:	b0 c0       	rjmp	.+352    	; 0xff6 <DIO_enuSetPinDirection+0x1ba>
     e96:	6d 81       	ldd	r22, Y+5	; 0x05
     e98:	7e 81       	ldd	r23, Y+6	; 0x06
     e9a:	62 30       	cpi	r22, 0x02	; 2
     e9c:	71 05       	cpc	r23, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <DIO_enuSetPinDirection+0x66>
     ea0:	59 c0       	rjmp	.+178    	; 0xf54 <DIO_enuSetPinDirection+0x118>
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <DIO_enuSetPinDirection+0x72>
     eac:	7c c0       	rjmp	.+248    	; 0xfa6 <DIO_enuSetPinDirection+0x16a>
     eae:	a3 c0       	rjmp	.+326    	; 0xff6 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
     eb0:	aa e3       	ldi	r26, 0x3A	; 58
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ea e3       	ldi	r30, 0x3A	; 58
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_enuSetPinDirection+0x90>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	2a 95       	dec	r18
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_enuSetPinDirection+0x8c>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
			DDRA|=(Copy_u8Value<<Copy_u8PinID);
     ed6:	aa e3       	ldi	r26, 0x3A	; 58
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ea e3       	ldi	r30, 0x3A	; 58
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	b9 01       	movw	r22, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_enuSetPinDirection+0xba>
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	8a 95       	dec	r24
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_enuSetPinDirection+0xb6>
     efa:	cb 01       	movw	r24, r22
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	7a c0       	rjmp	.+244    	; 0xff6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
     f02:	a7 e3       	ldi	r26, 0x37	; 55
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e3       	ldi	r30, 0x37	; 55
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_enuSetPinDirection+0xe2>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	2a 95       	dec	r18
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_enuSetPinDirection+0xde>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
			DDRB|=(Copy_u8Value<<Copy_u8PinID);
     f28:	a7 e3       	ldi	r26, 0x37	; 55
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e7 e3       	ldi	r30, 0x37	; 55
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	b9 01       	movw	r22, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_enuSetPinDirection+0x10c>
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	8a 95       	dec	r24
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_enuSetPinDirection+0x108>
     f4c:	cb 01       	movw	r24, r22
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	51 c0       	rjmp	.+162    	; 0xff6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
     f54:	aa e3       	ldi	r26, 0x3A	; 58
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ea e3       	ldi	r30, 0x3A	; 58
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_enuSetPinDirection+0x134>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	2a 95       	dec	r18
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_enuSetPinDirection+0x130>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
			DDRC|=(Copy_u8Value<<Copy_u8PinID);
     f7a:	a4 e3       	ldi	r26, 0x34	; 52
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e4 e3       	ldi	r30, 0x34	; 52
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	b9 01       	movw	r22, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_enuSetPinDirection+0x15e>
     f96:	66 0f       	add	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_enuSetPinDirection+0x15a>
     f9e:	cb 01       	movw	r24, r22
     fa0:	84 2b       	or	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	28 c0       	rjmp	.+80     	; 0xff6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
     fa6:	a1 e3       	ldi	r26, 0x31	; 49
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e1 e3       	ldi	r30, 0x31	; 49
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_enuSetPinDirection+0x186>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	2a 95       	dec	r18
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_enuSetPinDirection+0x182>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
			DDRD|=(Copy_u8Value<<Copy_u8PinID);
     fcc:	a1 e3       	ldi	r26, 0x31	; 49
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e1 e3       	ldi	r30, 0x31	; 49
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	b9 01       	movw	r22, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_enuSetPinDirection+0x1b0>
     fe8:	66 0f       	add	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	8a 95       	dec	r24
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_enuSetPinDirection+0x1ac>
     ff0:	cb 01       	movw	r24, r22
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate=ES_OK;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	26 96       	adiw	r28, 0x06	; 6
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <DIO_enuSetPinValue>:



ES_t DIO_enuSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8Value)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <DIO_enuSetPinValue+0x6>
    101a:	00 d0       	rcall	.+0      	; 0x101c <DIO_enuSetPinValue+0x8>
    101c:	00 d0       	rcall	.+0      	; 0x101e <DIO_enuSetPinValue+0xa>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	8a 83       	std	Y+2, r24	; 0x02
    1024:	6b 83       	std	Y+3, r22	; 0x03
    1026:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1028:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD &&
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	08 f0       	brcs	.+2      	; 0x1032 <DIO_enuSetPinValue+0x1e>
    1030:	d1 c0       	rjmp	.+418    	; 0x11d4 <DIO_enuSetPinValue+0x1c0>
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	88 30       	cpi	r24, 0x08	; 8
    1036:	08 f0       	brcs	.+2      	; 0x103a <DIO_enuSetPinValue+0x26>
    1038:	cd c0       	rjmp	.+410    	; 0x11d4 <DIO_enuSetPinValue+0x1c0>
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	08 f0       	brcs	.+2      	; 0x1042 <DIO_enuSetPinValue+0x2e>
    1040:	c9 c0       	rjmp	.+402    	; 0x11d4 <DIO_enuSetPinValue+0x1c0>
	   Copy_u8PinID<=DIO_PIN7 &&
	   Copy_u8Value<=OUTPUT)
	{
		switch(Copy_u8PortID)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3e 83       	std	Y+6, r19	; 0x06
    104a:	2d 83       	std	Y+5, r18	; 0x05
    104c:	6d 81       	ldd	r22, Y+5	; 0x05
    104e:	7e 81       	ldd	r23, Y+6	; 0x06
    1050:	61 30       	cpi	r22, 0x01	; 1
    1052:	71 05       	cpc	r23, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <DIO_enuSetPinValue+0x44>
    1056:	41 c0       	rjmp	.+130    	; 0x10da <DIO_enuSetPinValue+0xc6>
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	91 05       	cpc	r25, r1
    1060:	34 f4       	brge	.+12     	; 0x106e <DIO_enuSetPinValue+0x5a>
    1062:	2d 81       	ldd	r18, Y+5	; 0x05
    1064:	3e 81       	ldd	r19, Y+6	; 0x06
    1066:	21 15       	cp	r18, r1
    1068:	31 05       	cpc	r19, r1
    106a:	71 f0       	breq	.+28     	; 0x1088 <DIO_enuSetPinValue+0x74>
    106c:	b0 c0       	rjmp	.+352    	; 0x11ce <DIO_enuSetPinValue+0x1ba>
    106e:	6d 81       	ldd	r22, Y+5	; 0x05
    1070:	7e 81       	ldd	r23, Y+6	; 0x06
    1072:	62 30       	cpi	r22, 0x02	; 2
    1074:	71 05       	cpc	r23, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <DIO_enuSetPinValue+0x66>
    1078:	59 c0       	rjmp	.+178    	; 0x112c <DIO_enuSetPinValue+0x118>
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	91 05       	cpc	r25, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <DIO_enuSetPinValue+0x72>
    1084:	7c c0       	rjmp	.+248    	; 0x117e <DIO_enuSetPinValue+0x16a>
    1086:	a3 c0       	rjmp	.+326    	; 0x11ce <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1088:	ab e3       	ldi	r26, 0x3B	; 59
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	eb e3       	ldi	r30, 0x3B	; 59
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_enuSetPinValue+0x90>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	2a 95       	dec	r18
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_enuSetPinValue+0x8c>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinID);
    10ae:	ab e3       	ldi	r26, 0x3B	; 59
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	eb e3       	ldi	r30, 0x3B	; 59
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	b9 01       	movw	r22, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_enuSetPinValue+0xba>
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_enuSetPinValue+0xb6>
    10d2:	cb 01       	movw	r24, r22
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	7a c0       	rjmp	.+244    	; 0x11ce <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    10da:	a8 e3       	ldi	r26, 0x38	; 56
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e8 e3       	ldi	r30, 0x38	; 56
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_enuSetPinValue+0xe2>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	2a 95       	dec	r18
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_enuSetPinValue+0xde>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinID);
    1100:	a8 e3       	ldi	r26, 0x38	; 56
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e8 e3       	ldi	r30, 0x38	; 56
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	b9 01       	movw	r22, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_enuSetPinValue+0x10c>
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_enuSetPinValue+0x108>
    1124:	cb 01       	movw	r24, r22
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	51 c0       	rjmp	.+162    	; 0x11ce <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    112c:	ab e3       	ldi	r26, 0x3B	; 59
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e3       	ldi	r30, 0x3B	; 59
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_enuSetPinValue+0x134>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	2a 95       	dec	r18
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_enuSetPinValue+0x130>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinID);
    1152:	a5 e3       	ldi	r26, 0x35	; 53
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e3       	ldi	r30, 0x35	; 53
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	b9 01       	movw	r22, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_enuSetPinValue+0x15e>
    116e:	66 0f       	add	r22, r22
    1170:	77 1f       	adc	r23, r23
    1172:	8a 95       	dec	r24
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_enuSetPinValue+0x15a>
    1176:	cb 01       	movw	r24, r22
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	28 c0       	rjmp	.+80     	; 0x11ce <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    117e:	a2 e3       	ldi	r26, 0x32	; 50
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_enuSetPinValue+0x186>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	2a 95       	dec	r18
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_enuSetPinValue+0x182>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinID);
    11a4:	a2 e3       	ldi	r26, 0x32	; 50
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	b9 01       	movw	r22, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_enuSetPinValue+0x1b0>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_enuSetPinValue+0x1ac>
    11c8:	cb 01       	movw	r24, r22
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate=ES_OK;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11da:	26 96       	adiw	r28, 0x06	; 6
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <DIO_enuTogPinValue>:



ES_t DIO_enuTogPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_enuTogPinValue+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_enuTogPinValue+0x8>
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	8a 83       	std	Y+2, r24	; 0x02
    11fc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    11fe:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD &&
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	08 f0       	brcs	.+2      	; 0x1208 <DIO_enuTogPinValue+0x1c>
    1206:	75 c0       	rjmp	.+234    	; 0x12f2 <DIO_enuTogPinValue+0x106>
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	88 30       	cpi	r24, 0x08	; 8
    120c:	08 f0       	brcs	.+2      	; 0x1210 <DIO_enuTogPinValue+0x24>
    120e:	71 c0       	rjmp	.+226    	; 0x12f2 <DIO_enuTogPinValue+0x106>
	   Copy_u8PinID<=DIO_PIN7 )
	{
		switch(Copy_u8PortID)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	49 f1       	breq	.+82     	; 0x1276 <DIO_enuTogPinValue+0x8a>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	2c f4       	brge	.+10     	; 0x1238 <DIO_enuTogPinValue+0x4c>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	61 f0       	breq	.+24     	; 0x124e <DIO_enuTogPinValue+0x62>
    1236:	5a c0       	rjmp	.+180    	; 0x12ec <DIO_enuTogPinValue+0x100>
    1238:	2c 81       	ldd	r18, Y+4	; 0x04
    123a:	3d 81       	ldd	r19, Y+5	; 0x05
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	71 f1       	breq	.+92     	; 0x129e <DIO_enuTogPinValue+0xb2>
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	91 05       	cpc	r25, r1
    124a:	e9 f1       	breq	.+122    	; 0x12c6 <DIO_enuTogPinValue+0xda>
    124c:	4f c0       	rjmp	.+158    	; 0x12ec <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA^=(DIO_MASK_BIT<<Copy_u8PinID);
    124e:	ab e3       	ldi	r26, 0x3B	; 59
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	eb e3       	ldi	r30, 0x3B	; 59
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_enuTogPinValue+0x80>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_enuTogPinValue+0x7c>
    1270:	84 27       	eor	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	3b c0       	rjmp	.+118    	; 0x12ec <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB^=(DIO_MASK_BIT<<Copy_u8PinID);
    1276:	a8 e3       	ldi	r26, 0x38	; 56
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 e3       	ldi	r30, 0x38	; 56
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_enuTogPinValue+0xa8>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_enuTogPinValue+0xa4>
    1298:	84 27       	eor	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	27 c0       	rjmp	.+78     	; 0x12ec <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC^=(DIO_MASK_BIT<<Copy_u8PinID);
    129e:	a5 e3       	ldi	r26, 0x35	; 53
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_enuTogPinValue+0xd0>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_enuTogPinValue+0xcc>
    12c0:	84 27       	eor	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	13 c0       	rjmp	.+38     	; 0x12ec <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD^=(DIO_MASK_BIT<<Copy_u8PinID);
    12c6:	a2 e3       	ldi	r26, 0x32	; 50
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e2 e3       	ldi	r30, 0x32	; 50
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_enuTogPinValue+0xf8>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_enuTogPinValue+0xf4>
    12e8:	84 27       	eor	r24, r20
    12ea:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate=ES_OK;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <DIO_enuGetPinValue>:



ES_t DIO_enuGetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8Value)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	27 97       	sbiw	r28, 0x07	; 7
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	8a 83       	std	Y+2, r24	; 0x02
    131e:	6b 83       	std	Y+3, r22	; 0x03
    1320:	5d 83       	std	Y+5, r21	; 0x05
    1322:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1324:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	09 f4       	brne	.+2      	; 0x1330 <DIO_enuGetPinValue+0x28>
    132e:	7e c0       	rjmp	.+252    	; 0x142c <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID<=DIO_PORTD &&
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	84 30       	cpi	r24, 0x04	; 4
    1334:	08 f0       	brcs	.+2      	; 0x1338 <DIO_enuGetPinValue+0x30>
    1336:	77 c0       	rjmp	.+238    	; 0x1426 <DIO_enuGetPinValue+0x11e>
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	88 30       	cpi	r24, 0x08	; 8
    133c:	08 f0       	brcs	.+2      	; 0x1340 <DIO_enuGetPinValue+0x38>
    133e:	73 c0       	rjmp	.+230    	; 0x1426 <DIO_enuGetPinValue+0x11e>
		   Copy_u8PinID<=DIO_PIN7 )
		{
			switch(Copy_u8PortID)
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3f 83       	std	Y+7, r19	; 0x07
    1348:	2e 83       	std	Y+6, r18	; 0x06
    134a:	4e 81       	ldd	r20, Y+6	; 0x06
    134c:	5f 81       	ldd	r21, Y+7	; 0x07
    134e:	41 30       	cpi	r20, 0x01	; 1
    1350:	51 05       	cpc	r21, r1
    1352:	59 f1       	breq	.+86     	; 0x13aa <DIO_enuGetPinValue+0xa2>
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	91 05       	cpc	r25, r1
    135c:	34 f4       	brge	.+12     	; 0x136a <DIO_enuGetPinValue+0x62>
    135e:	2e 81       	ldd	r18, Y+6	; 0x06
    1360:	3f 81       	ldd	r19, Y+7	; 0x07
    1362:	21 15       	cp	r18, r1
    1364:	31 05       	cpc	r19, r1
    1366:	69 f0       	breq	.+26     	; 0x1382 <DIO_enuGetPinValue+0x7a>
    1368:	5b c0       	rjmp	.+182    	; 0x1420 <DIO_enuGetPinValue+0x118>
    136a:	4e 81       	ldd	r20, Y+6	; 0x06
    136c:	5f 81       	ldd	r21, Y+7	; 0x07
    136e:	42 30       	cpi	r20, 0x02	; 2
    1370:	51 05       	cpc	r21, r1
    1372:	79 f1       	breq	.+94     	; 0x13d2 <DIO_enuGetPinValue+0xca>
    1374:	8e 81       	ldd	r24, Y+6	; 0x06
    1376:	9f 81       	ldd	r25, Y+7	; 0x07
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <DIO_enuGetPinValue+0x78>
    137e:	3d c0       	rjmp	.+122    	; 0x13fa <DIO_enuGetPinValue+0xf2>
    1380:	4f c0       	rjmp	.+158    	; 0x1420 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value=((PORTA>>Copy_u8PinID)&DIO_MASK_BIT);
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_enuGetPinValue+0x92>
    1396:	55 95       	asr	r21
    1398:	47 95       	ror	r20
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_enuGetPinValue+0x8e>
    139e:	ca 01       	movw	r24, r20
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	ec 81       	ldd	r30, Y+4	; 0x04
    13a4:	fd 81       	ldd	r31, Y+5	; 0x05
    13a6:	80 83       	st	Z, r24
    13a8:	3b c0       	rjmp	.+118    	; 0x1420 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=((PORTB>>Copy_u8PinID)&DIO_MASK_BIT);
    13aa:	e8 e3       	ldi	r30, 0x38	; 56
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a9 01       	movw	r20, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_enuGetPinValue+0xba>
    13be:	55 95       	asr	r21
    13c0:	47 95       	ror	r20
    13c2:	8a 95       	dec	r24
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_enuGetPinValue+0xb6>
    13c6:	ca 01       	movw	r24, r20
    13c8:	81 70       	andi	r24, 0x01	; 1
    13ca:	ec 81       	ldd	r30, Y+4	; 0x04
    13cc:	fd 81       	ldd	r31, Y+5	; 0x05
    13ce:	80 83       	st	Z, r24
    13d0:	27 c0       	rjmp	.+78     	; 0x1420 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=((PORTC>>Copy_u8PinID)&DIO_MASK_BIT);
    13d2:	e5 e3       	ldi	r30, 0x35	; 53
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_enuGetPinValue+0xe2>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_enuGetPinValue+0xde>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	ec 81       	ldd	r30, Y+4	; 0x04
    13f4:	fd 81       	ldd	r31, Y+5	; 0x05
    13f6:	80 83       	st	Z, r24
    13f8:	13 c0       	rjmp	.+38     	; 0x1420 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=((PORTD>>Copy_u8PinID)&DIO_MASK_BIT);
    13fa:	e2 e3       	ldi	r30, 0x32	; 50
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_enuGetPinValue+0x10a>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_enuGetPinValue+0x106>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	ec 81       	ldd	r30, Y+4	; 0x04
    141c:	fd 81       	ldd	r31, Y+5	; 0x05
    141e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    1426:	83 e0       	ldi	r24, 0x03	; 3
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
}
    1432:	27 96       	adiw	r28, 0x07	; 7
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <EXTI_enuInit>:
//static for isolation (not be seen from other files)

extern EXTI_t EXTI_AstrEXTIConfig [3];

ES_t EXTI_enuInit(void)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	2a 97       	sbiw	r28, 0x0a	; 10
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState =ES_NOK;
    1458:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator;
	for(Local_u8Iterator=0 ; Local_u8Iterator<PINS_NUM ; Local_u8Iterator++)
    145a:	19 82       	std	Y+1, r1	; 0x01
    145c:	49 c1       	rjmp	.+658    	; 0x16f0 <EXTI_enuInit+0x2ac>
	{
		if(EXTI_AstrEXTIConfig[Local_u8Iterator].EXTI_u8State == ACTIVE)
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	fc 01       	movw	r30, r24
    146a:	eb 57       	subi	r30, 0x7B	; 123
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	09 f0       	breq	.+2      	; 0x1476 <EXTI_enuInit+0x32>
    1474:	3a c1       	rjmp	.+628    	; 0x16ea <EXTI_enuInit+0x2a6>
		{
			switch(Local_u8Iterator)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3a 87       	std	Y+10, r19	; 0x0a
    147e:	29 87       	std	Y+9, r18	; 0x09
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <EXTI_enuInit+0x48>
    148a:	81 c0       	rjmp	.+258    	; 0x158e <EXTI_enuInit+0x14a>
    148c:	29 85       	ldd	r18, Y+9	; 0x09
    148e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <EXTI_enuInit+0x54>
    1496:	f1 c0       	rjmp	.+482    	; 0x167a <EXTI_enuInit+0x236>
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	09 f0       	breq	.+2      	; 0x14a2 <EXTI_enuInit+0x5e>
    14a0:	22 c1       	rjmp	.+580    	; 0x16e6 <EXTI_enuInit+0x2a2>
			{
			case 0:
				SET_BIT(GICR,GICR_INT0);
    14a2:	ab e5       	ldi	r26, 0x5B	; 91
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	eb e5       	ldi	r30, 0x5B	; 91
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 64       	ori	r24, 0x40	; 64
    14ae:	8c 93       	st	X, r24
				switch(EXTI_AstrEXTIConfig[Local_u8Iterator].EXTI_u8SenseLevel)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	fc 01       	movw	r30, r24
    14bc:	ea 57       	subi	r30, 0x7A	; 122
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	80 81       	ld	r24, Z
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	38 87       	std	Y+8, r19	; 0x08
    14c8:	2f 83       	std	Y+7, r18	; 0x07
    14ca:	8f 81       	ldd	r24, Y+7	; 0x07
    14cc:	98 85       	ldd	r25, Y+8	; 0x08
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	91 05       	cpc	r25, r1
    14d2:	39 f1       	breq	.+78     	; 0x1522 <EXTI_enuInit+0xde>
    14d4:	2f 81       	ldd	r18, Y+7	; 0x07
    14d6:	38 85       	ldd	r19, Y+8	; 0x08
    14d8:	23 30       	cpi	r18, 0x03	; 3
    14da:	31 05       	cpc	r19, r1
    14dc:	34 f4       	brge	.+12     	; 0x14ea <EXTI_enuInit+0xa6>
    14de:	8f 81       	ldd	r24, Y+7	; 0x07
    14e0:	98 85       	ldd	r25, Y+8	; 0x08
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	61 f0       	breq	.+24     	; 0x1500 <EXTI_enuInit+0xbc>
    14e8:	4f c0       	rjmp	.+158    	; 0x1588 <EXTI_enuInit+0x144>
    14ea:	2f 81       	ldd	r18, Y+7	; 0x07
    14ec:	38 85       	ldd	r19, Y+8	; 0x08
    14ee:	23 30       	cpi	r18, 0x03	; 3
    14f0:	31 05       	cpc	r19, r1
    14f2:	41 f1       	breq	.+80     	; 0x1544 <EXTI_enuInit+0x100>
    14f4:	8f 81       	ldd	r24, Y+7	; 0x07
    14f6:	98 85       	ldd	r25, Y+8	; 0x08
    14f8:	84 30       	cpi	r24, 0x04	; 4
    14fa:	91 05       	cpc	r25, r1
    14fc:	a1 f1       	breq	.+104    	; 0x1566 <EXTI_enuInit+0x122>
    14fe:	44 c0       	rjmp	.+136    	; 0x1588 <EXTI_enuInit+0x144>
				{
				case LOW_LEVEL:
					CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1500:	a5 e5       	ldi	r26, 0x55	; 85
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e5       	ldi	r30, 0x55	; 85
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	8e 7f       	andi	r24, 0xFE	; 254
    150c:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,MCUCR_ISC01);
    150e:	a5 e5       	ldi	r26, 0x55	; 85
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e5       	ldi	r30, 0x55	; 85
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	8a 83       	std	Y+2, r24	; 0x02
    1520:	e4 c0       	rjmp	.+456    	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				case LOGICAL_CHANGE:
					SET_BIT(MCUCR,MCUCR_ISC00);
    1522:	a5 e5       	ldi	r26, 0x55	; 85
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e5       	ldi	r30, 0x55	; 85
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	81 60       	ori	r24, 0x01	; 1
    152e:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8d 7f       	andi	r24, 0xFD	; 253
    153c:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	8a 83       	std	Y+2, r24	; 0x02
    1542:	d3 c0       	rjmp	.+422    	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				case FALLING_EDGE:
					CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1544:	a5 e5       	ldi	r26, 0x55	; 85
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e5       	ldi	r30, 0x55	; 85
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8e 7f       	andi	r24, 0xFE	; 254
    1550:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC01);
    1552:	a5 e5       	ldi	r26, 0x55	; 85
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e5       	ldi	r30, 0x55	; 85
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	82 60       	ori	r24, 0x02	; 2
    155e:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	c2 c0       	rjmp	.+388    	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCR,MCUCR_ISC00);
    1566:	a5 e5       	ldi	r26, 0x55	; 85
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e5       	ldi	r30, 0x55	; 85
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC01);
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e5       	ldi	r30, 0x55	; 85
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	82 60       	ori	r24, 0x02	; 2
    1580:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	8a 83       	std	Y+2, r24	; 0x02
    1586:	b1 c0       	rjmp	.+354    	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				default:
					Local_enuErrorState =ES_OUT_OF_RANGE;
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	ae c0       	rjmp	.+348    	; 0x16ea <EXTI_enuInit+0x2a6>
				}
				break;

			case 1:
				SET_BIT(GICR,GICR_INT1);
    158e:	ab e5       	ldi	r26, 0x5B	; 91
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	eb e5       	ldi	r30, 0x5B	; 91
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 62       	ori	r24, 0x20	; 32
    159a:	8c 93       	st	X, r24
				switch(EXTI_AstrEXTIConfig[Local_u8Iterator].EXTI_u8SenseLevel)
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	fc 01       	movw	r30, r24
    15a8:	ea 57       	subi	r30, 0x7A	; 122
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	3e 83       	std	Y+6, r19	; 0x06
    15b4:	2d 83       	std	Y+5, r18	; 0x05
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	91 05       	cpc	r25, r1
    15be:	39 f1       	breq	.+78     	; 0x160e <EXTI_enuInit+0x1ca>
    15c0:	2d 81       	ldd	r18, Y+5	; 0x05
    15c2:	3e 81       	ldd	r19, Y+6	; 0x06
    15c4:	23 30       	cpi	r18, 0x03	; 3
    15c6:	31 05       	cpc	r19, r1
    15c8:	34 f4       	brge	.+12     	; 0x15d6 <EXTI_enuInit+0x192>
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	61 f0       	breq	.+24     	; 0x15ec <EXTI_enuInit+0x1a8>
    15d4:	4f c0       	rjmp	.+158    	; 0x1674 <EXTI_enuInit+0x230>
    15d6:	2d 81       	ldd	r18, Y+5	; 0x05
    15d8:	3e 81       	ldd	r19, Y+6	; 0x06
    15da:	23 30       	cpi	r18, 0x03	; 3
    15dc:	31 05       	cpc	r19, r1
    15de:	41 f1       	breq	.+80     	; 0x1630 <EXTI_enuInit+0x1ec>
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	91 05       	cpc	r25, r1
    15e8:	a1 f1       	breq	.+104    	; 0x1652 <EXTI_enuInit+0x20e>
    15ea:	44 c0       	rjmp	.+136    	; 0x1674 <EXTI_enuInit+0x230>
				{
				case LOW_LEVEL:
					CLEAR_BIT(MCUCR,MCUCR_ISC10);
    15ec:	a5 e5       	ldi	r26, 0x55	; 85
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e5       	ldi	r30, 0x55	; 85
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,MCUCR_ISC11);
    15fa:	a5 e5       	ldi	r26, 0x55	; 85
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e5       	ldi	r30, 0x55	; 85
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	87 7f       	andi	r24, 0xF7	; 247
    1606:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	6e c0       	rjmp	.+220    	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				case LOGICAL_CHANGE:
					SET_BIT(MCUCR,MCUCR_ISC10);
    160e:	a5 e5       	ldi	r26, 0x55	; 85
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e5       	ldi	r30, 0x55	; 85
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,MCUCR_ISC11);
    161c:	a5 e5       	ldi	r26, 0x55	; 85
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e5       	ldi	r30, 0x55	; 85
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	87 7f       	andi	r24, 0xF7	; 247
    1628:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	8a 83       	std	Y+2, r24	; 0x02
    162e:	5d c0       	rjmp	.+186    	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				case FALLING_EDGE:
					CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1630:	a5 e5       	ldi	r26, 0x55	; 85
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e5       	ldi	r30, 0x55	; 85
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8b 7f       	andi	r24, 0xFB	; 251
    163c:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC11);
    163e:	a5 e5       	ldi	r26, 0x55	; 85
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e5       	ldi	r30, 0x55	; 85
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	88 60       	ori	r24, 0x08	; 8
    164a:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	4c c0       	rjmp	.+152    	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCR,MCUCR_ISC10);
    1652:	a5 e5       	ldi	r26, 0x55	; 85
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e5       	ldi	r30, 0x55	; 85
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	84 60       	ori	r24, 0x04	; 4
    165e:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC11);
    1660:	a5 e5       	ldi	r26, 0x55	; 85
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e5 e5       	ldi	r30, 0x55	; 85
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	88 60       	ori	r24, 0x08	; 8
    166c:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	8a 83       	std	Y+2, r24	; 0x02
    1672:	3b c0       	rjmp	.+118    	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				default:
					Local_enuErrorState =ES_OUT_OF_RANGE;
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	38 c0       	rjmp	.+112    	; 0x16ea <EXTI_enuInit+0x2a6>
				}
				break;

			case 2:
				SET_BIT(GICR,GICR_INT2);
    167a:	ab e5       	ldi	r26, 0x5B	; 91
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	eb e5       	ldi	r30, 0x5B	; 91
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 68       	ori	r24, 0x80	; 128
    1686:	8c 93       	st	X, r24
				switch(EXTI_AstrEXTIConfig[Local_u8Iterator].EXTI_u8SenseLevel)
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	fc 01       	movw	r30, r24
    1694:	ea 57       	subi	r30, 0x7A	; 122
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3c 83       	std	Y+4, r19	; 0x04
    16a0:	2b 83       	std	Y+3, r18	; 0x03
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	83 30       	cpi	r24, 0x03	; 3
    16a8:	91 05       	cpc	r25, r1
    16aa:	31 f0       	breq	.+12     	; 0x16b8 <EXTI_enuInit+0x274>
    16ac:	2b 81       	ldd	r18, Y+3	; 0x03
    16ae:	3c 81       	ldd	r19, Y+4	; 0x04
    16b0:	24 30       	cpi	r18, 0x04	; 4
    16b2:	31 05       	cpc	r19, r1
    16b4:	59 f0       	breq	.+22     	; 0x16cc <EXTI_enuInit+0x288>
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <EXTI_enuInit+0x29c>
				{
				case FALLING_EDGE :
					CLEAR_BIT(MCUCSR ,MCUCSR_ISC2);
    16b8:	a4 e5       	ldi	r26, 0x54	; 84
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e4 e5       	ldi	r30, 0x54	; 84
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8f 7b       	andi	r24, 0xBF	; 191
    16c4:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <EXTI_enuInit+0x2a6>
					break;

				case RISING_EDGE:
					SET_BIT(MCUCSR ,MCUCSR_ISC2);
    16cc:	a4 e5       	ldi	r26, 0x54	; 84
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e4 e5       	ldi	r30, 0x54	; 84
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	80 64       	ori	r24, 0x40	; 64
    16d8:	8c 93       	st	X, r24
					Local_enuErrorState =ES_OK;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	8a 83       	std	Y+2, r24	; 0x02
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <EXTI_enuInit+0x2a6>
					break;
				default:
					Local_enuErrorState=ES_OUT_OF_RANGE;
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	8a 83       	std	Y+2, r24	; 0x02
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <EXTI_enuInit+0x2a6>
				}
				break;

			default:
				Local_enuErrorState=ES_OUT_OF_RANGE;
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	8a 83       	std	Y+2, r24	; 0x02
ES_t EXTI_enuInit(void)
{
	ES_t Local_enuErrorState =ES_NOK;

	u8 Local_u8Iterator;
	for(Local_u8Iterator=0 ; Local_u8Iterator<PINS_NUM ; Local_u8Iterator++)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	08 f4       	brcc	.+2      	; 0x16f8 <EXTI_enuInit+0x2b4>
    16f6:	b3 ce       	rjmp	.-666    	; 0x145e <EXTI_enuInit+0x1a>
			}
		}
	}


	return Local_enuErrorState;
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16fa:	2a 96       	adiw	r28, 0x0a	; 10
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <EXTI_enuSetSenceMode>:



ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	2b 97       	sbiw	r28, 0x0b	; 11
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState =ES_OK;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTI_ID)
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3b 87       	std	Y+11, r19	; 0x0b
    1730:	2a 87       	std	Y+10, r18	; 0x0a
    1732:	8a 85       	ldd	r24, Y+10	; 0x0a
    1734:	9b 85       	ldd	r25, Y+11	; 0x0b
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	91 05       	cpc	r25, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <EXTI_enuSetSenceMode+0x32>
    173c:	6b c0       	rjmp	.+214    	; 0x1814 <EXTI_enuSetSenceMode+0x108>
    173e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1740:	3b 85       	ldd	r19, Y+11	; 0x0b
    1742:	23 30       	cpi	r18, 0x03	; 3
    1744:	31 05       	cpc	r19, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <EXTI_enuSetSenceMode+0x3e>
    1748:	c4 c0       	rjmp	.+392    	; 0x18d2 <EXTI_enuSetSenceMode+0x1c6>
    174a:	8a 85       	ldd	r24, Y+10	; 0x0a
    174c:	9b 85       	ldd	r25, Y+11	; 0x0b
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	09 f0       	breq	.+2      	; 0x1756 <EXTI_enuSetSenceMode+0x4a>
    1754:	e1 c0       	rjmp	.+450    	; 0x1918 <EXTI_enuSetSenceMode+0x20c>
	{
	case INT0:
		switch(Copy_u8SenseLevel)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	39 87       	std	Y+9, r19	; 0x09
    175e:	28 87       	std	Y+8, r18	; 0x08
    1760:	88 85       	ldd	r24, Y+8	; 0x08
    1762:	99 85       	ldd	r25, Y+9	; 0x09
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	91 05       	cpc	r25, r1
    1768:	29 f1       	breq	.+74     	; 0x17b4 <EXTI_enuSetSenceMode+0xa8>
    176a:	28 85       	ldd	r18, Y+8	; 0x08
    176c:	39 85       	ldd	r19, Y+9	; 0x09
    176e:	23 30       	cpi	r18, 0x03	; 3
    1770:	31 05       	cpc	r19, r1
    1772:	34 f4       	brge	.+12     	; 0x1780 <EXTI_enuSetSenceMode+0x74>
    1774:	88 85       	ldd	r24, Y+8	; 0x08
    1776:	99 85       	ldd	r25, Y+9	; 0x09
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	91 05       	cpc	r25, r1
    177c:	61 f0       	breq	.+24     	; 0x1796 <EXTI_enuSetSenceMode+0x8a>
    177e:	47 c0       	rjmp	.+142    	; 0x180e <EXTI_enuSetSenceMode+0x102>
    1780:	28 85       	ldd	r18, Y+8	; 0x08
    1782:	39 85       	ldd	r19, Y+9	; 0x09
    1784:	23 30       	cpi	r18, 0x03	; 3
    1786:	31 05       	cpc	r19, r1
    1788:	21 f1       	breq	.+72     	; 0x17d2 <EXTI_enuSetSenceMode+0xc6>
    178a:	88 85       	ldd	r24, Y+8	; 0x08
    178c:	99 85       	ldd	r25, Y+9	; 0x09
    178e:	84 30       	cpi	r24, 0x04	; 4
    1790:	91 05       	cpc	r25, r1
    1792:	71 f1       	breq	.+92     	; 0x17f0 <EXTI_enuSetSenceMode+0xe4>
    1794:	3c c0       	rjmp	.+120    	; 0x180e <EXTI_enuSetSenceMode+0x102>
		{
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1796:	a5 e5       	ldi	r26, 0x55	; 85
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e5       	ldi	r30, 0x55	; 85
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	8e 7f       	andi	r24, 0xFE	; 254
    17a2:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC01);
    17a4:	a5 e5       	ldi	r26, 0x55	; 85
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e5 e5       	ldi	r30, 0x55	; 85
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	8d 7f       	andi	r24, 0xFD	; 253
    17b0:	8c 93       	st	X, r24
    17b2:	b4 c0       	rjmp	.+360    	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    17b4:	a5 e5       	ldi	r26, 0x55	; 85
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e5       	ldi	r30, 0x55	; 85
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	81 60       	ori	r24, 0x01	; 1
    17c0:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC01);
    17c2:	a5 e5       	ldi	r26, 0x55	; 85
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e5 e5       	ldi	r30, 0x55	; 85
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8d 7f       	andi	r24, 0xFD	; 253
    17ce:	8c 93       	st	X, r24
    17d0:	a5 c0       	rjmp	.+330    	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		case FALLING_EDGE:
			CLEAR_BIT(MCUCR,MCUCR_ISC00);
    17d2:	a5 e5       	ldi	r26, 0x55	; 85
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e5 e5       	ldi	r30, 0x55	; 85
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8e 7f       	andi	r24, 0xFE	; 254
    17de:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    17e0:	a5 e5       	ldi	r26, 0x55	; 85
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e5 e5       	ldi	r30, 0x55	; 85
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	82 60       	ori	r24, 0x02	; 2
    17ec:	8c 93       	st	X, r24
    17ee:	96 c0       	rjmp	.+300    	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    17f0:	a5 e5       	ldi	r26, 0x55	; 85
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e5 e5       	ldi	r30, 0x55	; 85
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	81 60       	ori	r24, 0x01	; 1
    17fc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    17fe:	a5 e5       	ldi	r26, 0x55	; 85
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e5       	ldi	r30, 0x55	; 85
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	82 60       	ori	r24, 0x02	; 2
    180a:	8c 93       	st	X, r24
    180c:	87 c0       	rjmp	.+270    	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		default:
			Local_enuErrorState =ES_OUT_OF_RANGE;
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	84 c0       	rjmp	.+264    	; 0x191c <EXTI_enuSetSenceMode+0x210>
		}
		break;

	case INT1:
		switch(Copy_u8SenseLevel)
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	3f 83       	std	Y+7, r19	; 0x07
    181c:	2e 83       	std	Y+6, r18	; 0x06
    181e:	8e 81       	ldd	r24, Y+6	; 0x06
    1820:	9f 81       	ldd	r25, Y+7	; 0x07
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	91 05       	cpc	r25, r1
    1826:	29 f1       	breq	.+74     	; 0x1872 <EXTI_enuSetSenceMode+0x166>
    1828:	2e 81       	ldd	r18, Y+6	; 0x06
    182a:	3f 81       	ldd	r19, Y+7	; 0x07
    182c:	23 30       	cpi	r18, 0x03	; 3
    182e:	31 05       	cpc	r19, r1
    1830:	34 f4       	brge	.+12     	; 0x183e <EXTI_enuSetSenceMode+0x132>
    1832:	8e 81       	ldd	r24, Y+6	; 0x06
    1834:	9f 81       	ldd	r25, Y+7	; 0x07
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	91 05       	cpc	r25, r1
    183a:	61 f0       	breq	.+24     	; 0x1854 <EXTI_enuSetSenceMode+0x148>
    183c:	47 c0       	rjmp	.+142    	; 0x18cc <EXTI_enuSetSenceMode+0x1c0>
    183e:	2e 81       	ldd	r18, Y+6	; 0x06
    1840:	3f 81       	ldd	r19, Y+7	; 0x07
    1842:	23 30       	cpi	r18, 0x03	; 3
    1844:	31 05       	cpc	r19, r1
    1846:	21 f1       	breq	.+72     	; 0x1890 <EXTI_enuSetSenceMode+0x184>
    1848:	8e 81       	ldd	r24, Y+6	; 0x06
    184a:	9f 81       	ldd	r25, Y+7	; 0x07
    184c:	84 30       	cpi	r24, 0x04	; 4
    184e:	91 05       	cpc	r25, r1
    1850:	71 f1       	breq	.+92     	; 0x18ae <EXTI_enuSetSenceMode+0x1a2>
    1852:	3c c0       	rjmp	.+120    	; 0x18cc <EXTI_enuSetSenceMode+0x1c0>
		{
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1854:	a5 e5       	ldi	r26, 0x55	; 85
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e5 e5       	ldi	r30, 0x55	; 85
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8b 7f       	andi	r24, 0xFB	; 251
    1860:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1862:	a5 e5       	ldi	r26, 0x55	; 85
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e5 e5       	ldi	r30, 0x55	; 85
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	87 7f       	andi	r24, 0xF7	; 247
    186e:	8c 93       	st	X, r24
    1870:	55 c0       	rjmp	.+170    	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    1872:	a5 e5       	ldi	r26, 0x55	; 85
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e5 e5       	ldi	r30, 0x55	; 85
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	84 60       	ori	r24, 0x04	; 4
    187e:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1880:	a5 e5       	ldi	r26, 0x55	; 85
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e5 e5       	ldi	r30, 0x55	; 85
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	87 7f       	andi	r24, 0xF7	; 247
    188c:	8c 93       	st	X, r24
    188e:	46 c0       	rjmp	.+140    	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		case FALLING_EDGE:
			CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1890:	a5 e5       	ldi	r26, 0x55	; 85
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e5 e5       	ldi	r30, 0x55	; 85
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8b 7f       	andi	r24, 0xFB	; 251
    189c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    189e:	a5 e5       	ldi	r26, 0x55	; 85
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e5       	ldi	r30, 0x55	; 85
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	88 60       	ori	r24, 0x08	; 8
    18aa:	8c 93       	st	X, r24
    18ac:	37 c0       	rjmp	.+110    	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    18ae:	a5 e5       	ldi	r26, 0x55	; 85
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e5 e5       	ldi	r30, 0x55	; 85
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	84 60       	ori	r24, 0x04	; 4
    18ba:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    18bc:	a5 e5       	ldi	r26, 0x55	; 85
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e5 e5       	ldi	r30, 0x55	; 85
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	88 60       	ori	r24, 0x08	; 8
    18c8:	8c 93       	st	X, r24
    18ca:	28 c0       	rjmp	.+80     	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		default:
			Local_enuErrorState =ES_OUT_OF_RANGE;
    18cc:	83 e0       	ldi	r24, 0x03	; 3
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	25 c0       	rjmp	.+74     	; 0x191c <EXTI_enuSetSenceMode+0x210>
		}
		break;

	case INT2:
		switch(Copy_u8SenseLevel)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	3d 83       	std	Y+5, r19	; 0x05
    18da:	2c 83       	std	Y+4, r18	; 0x04
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	9d 81       	ldd	r25, Y+5	; 0x05
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	91 05       	cpc	r25, r1
    18e4:	31 f0       	breq	.+12     	; 0x18f2 <EXTI_enuSetSenceMode+0x1e6>
    18e6:	2c 81       	ldd	r18, Y+4	; 0x04
    18e8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ea:	24 30       	cpi	r18, 0x04	; 4
    18ec:	31 05       	cpc	r19, r1
    18ee:	49 f0       	breq	.+18     	; 0x1902 <EXTI_enuSetSenceMode+0x1f6>
    18f0:	10 c0       	rjmp	.+32     	; 0x1912 <EXTI_enuSetSenceMode+0x206>
		{
		case FALLING_EDGE :
			CLEAR_BIT(MCUCSR ,MCUCSR_ISC2);
    18f2:	a4 e5       	ldi	r26, 0x54	; 84
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e4 e5       	ldi	r30, 0x54	; 84
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	8f 7b       	andi	r24, 0xBF	; 191
    18fe:	8c 93       	st	X, r24
    1900:	0d c0       	rjmp	.+26     	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;

		case RISING_EDGE:
			SET_BIT(MCUCSR ,MCUCSR_ISC2);
    1902:	a4 e5       	ldi	r26, 0x54	; 84
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e4 e5       	ldi	r30, 0x54	; 84
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 64       	ori	r24, 0x40	; 64
    190e:	8c 93       	st	X, r24
    1910:	05 c0       	rjmp	.+10     	; 0x191c <EXTI_enuSetSenceMode+0x210>
			break;
		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    1912:	83 e0       	ldi	r24, 0x03	; 3
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	02 c0       	rjmp	.+4      	; 0x191c <EXTI_enuSetSenceMode+0x210>
		}
		break;

	default:
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_enuErrorState;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
}
    191e:	2b 96       	adiw	r28, 0x0b	; 11
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <EXTI_enuEnableINT>:


ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <EXTI_enuEnableINT+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <EXTI_enuEnableINT+0x8>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_OK;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTI_ID)
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3c 83       	std	Y+4, r19	; 0x04
    194a:	2b 83       	std	Y+3, r18	; 0x03
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	91 05       	cpc	r25, r1
    1954:	91 f0       	breq	.+36     	; 0x197a <EXTI_enuEnableINT+0x4a>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	23 30       	cpi	r18, 0x03	; 3
    195c:	31 05       	cpc	r19, r1
    195e:	a9 f0       	breq	.+42     	; 0x198a <EXTI_enuEnableINT+0x5a>
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	91 05       	cpc	r25, r1
    1968:	c1 f4       	brne	.+48     	; 0x199a <EXTI_enuEnableINT+0x6a>
	{
	case INT0:
		SET_BIT(GICR,GICR_INT0);
    196a:	ab e5       	ldi	r26, 0x5B	; 91
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	eb e5       	ldi	r30, 0x5B	; 91
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	80 64       	ori	r24, 0x40	; 64
    1976:	8c 93       	st	X, r24
    1978:	12 c0       	rjmp	.+36     	; 0x199e <EXTI_enuEnableINT+0x6e>
		break;

	case INT1:
		SET_BIT(GICR,GICR_INT1);
    197a:	ab e5       	ldi	r26, 0x5B	; 91
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	eb e5       	ldi	r30, 0x5B	; 91
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 62       	ori	r24, 0x20	; 32
    1986:	8c 93       	st	X, r24
    1988:	0a c0       	rjmp	.+20     	; 0x199e <EXTI_enuEnableINT+0x6e>
		break;

	case INT2:
		SET_BIT(GICR,GICR_INT2);
    198a:	ab e5       	ldi	r26, 0x5B	; 91
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	eb e5       	ldi	r30, 0x5B	; 91
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 68       	ori	r24, 0x80	; 128
    1996:	8c 93       	st	X, r24
    1998:	02 c0       	rjmp	.+4      	; 0x199e <EXTI_enuEnableINT+0x6e>
		break;

	default:
		Local_enuErrorState=ES_OUT_OF_RANGE;
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    199e:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <EXTI_enuDisableINT>:

ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <EXTI_enuDisableINT+0x6>
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <EXTI_enuDisableINT+0x8>
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_OK;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTI_ID)
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	3c 83       	std	Y+4, r19	; 0x04
    19c8:	2b 83       	std	Y+3, r18	; 0x03
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	91 05       	cpc	r25, r1
    19d2:	91 f0       	breq	.+36     	; 0x19f8 <EXTI_enuDisableINT+0x4a>
    19d4:	2b 81       	ldd	r18, Y+3	; 0x03
    19d6:	3c 81       	ldd	r19, Y+4	; 0x04
    19d8:	23 30       	cpi	r18, 0x03	; 3
    19da:	31 05       	cpc	r19, r1
    19dc:	a9 f0       	breq	.+42     	; 0x1a08 <EXTI_enuDisableINT+0x5a>
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	91 05       	cpc	r25, r1
    19e6:	c1 f4       	brne	.+48     	; 0x1a18 <EXTI_enuDisableINT+0x6a>
	{
	case INT0:
		CLEAR_BIT(GICR,GICR_INT0);
    19e8:	ab e5       	ldi	r26, 0x5B	; 91
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	eb e5       	ldi	r30, 0x5B	; 91
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 7b       	andi	r24, 0xBF	; 191
    19f4:	8c 93       	st	X, r24
    19f6:	12 c0       	rjmp	.+36     	; 0x1a1c <EXTI_enuDisableINT+0x6e>
		break;

	case INT1:
		CLEAR_BIT(GICR,GICR_INT1);
    19f8:	ab e5       	ldi	r26, 0x5B	; 91
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e5       	ldi	r30, 0x5B	; 91
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7d       	andi	r24, 0xDF	; 223
    1a04:	8c 93       	st	X, r24
    1a06:	0a c0       	rjmp	.+20     	; 0x1a1c <EXTI_enuDisableINT+0x6e>
		break;

	case INT2:
		CLEAR_BIT(GICR,GICR_INT2);
    1a08:	ab e5       	ldi	r26, 0x5B	; 91
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e5       	ldi	r30, 0x5B	; 91
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	8f 77       	andi	r24, 0x7F	; 127
    1a14:	8c 93       	st	X, r24
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <EXTI_enuDisableINT+0x6e>
		break;

	default:
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1a18:	83 e0       	ldi	r24, 0x03	; 3
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <EXTI_enuCallBack>:




ES_t EXTI_enuCallBack(u8 Copy_u8EXTI_ID , void (*Copy_PtrFunc)(void))
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <EXTI_enuCallBack+0x6>
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <EXTI_enuCallBack+0x8>
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <EXTI_enuCallBack+0xa>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
    1a3c:	7c 83       	std	Y+4, r23	; 0x04
    1a3e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState =ES_OK;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_PtrFunc !=NULL)
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	61 f1       	breq	.+88     	; 0x1aa4 <EXTI_enuCallBack+0x78>
	{
		switch(Copy_u8EXTI_ID)
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	3e 83       	std	Y+6, r19	; 0x06
    1a54:	2d 83       	std	Y+5, r18	; 0x05
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	89 f0       	breq	.+34     	; 0x1a82 <EXTI_enuCallBack+0x56>
    1a60:	2d 81       	ldd	r18, Y+5	; 0x05
    1a62:	3e 81       	ldd	r19, Y+6	; 0x06
    1a64:	23 30       	cpi	r18, 0x03	; 3
    1a66:	31 05       	cpc	r19, r1
    1a68:	99 f0       	breq	.+38     	; 0x1a90 <EXTI_enuCallBack+0x64>
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	a9 f4       	brne	.+42     	; 0x1a9e <EXTI_enuCallBack+0x72>
		{
		case INT0:
			EXTI_PtrArrFunc[0]=Copy_PtrFunc;
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	90 93 8d 00 	sts	0x008D, r25
    1a7c:	80 93 8c 00 	sts	0x008C, r24
    1a80:	13 c0       	rjmp	.+38     	; 0x1aa8 <EXTI_enuCallBack+0x7c>
			break;

		case INT1:
			EXTI_PtrArrFunc[1]=Copy_PtrFunc;
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	90 93 8f 00 	sts	0x008F, r25
    1a8a:	80 93 8e 00 	sts	0x008E, r24
    1a8e:	0c c0       	rjmp	.+24     	; 0x1aa8 <EXTI_enuCallBack+0x7c>
			break;

		case INT2:
			EXTI_PtrArrFunc[2]=Copy_PtrFunc;
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	90 93 91 00 	sts	0x0091, r25
    1a98:	80 93 90 00 	sts	0x0090, r24
    1a9c:	05 c0       	rjmp	.+10     	; 0x1aa8 <EXTI_enuCallBack+0x7c>
			break;

		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <EXTI_enuCallBack+0x7c>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aaa:	26 96       	adiw	r28, 0x06	; 6
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <__vector_1>:




ISR(VECT_INT0)
{
    1abc:	1f 92       	push	r1
    1abe:	0f 92       	push	r0
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	0f 92       	push	r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	4f 93       	push	r20
    1acc:	5f 93       	push	r21
    1ace:	6f 93       	push	r22
    1ad0:	7f 93       	push	r23
    1ad2:	8f 93       	push	r24
    1ad4:	9f 93       	push	r25
    1ad6:	af 93       	push	r26
    1ad8:	bf 93       	push	r27
    1ada:	ef 93       	push	r30
    1adc:	ff 93       	push	r31
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PtrArrFunc[0] !=NULL)
    1ae6:	80 91 8c 00 	lds	r24, 0x008C
    1aea:	90 91 8d 00 	lds	r25, 0x008D
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	29 f0       	breq	.+10     	; 0x1afc <__vector_1+0x40>
	{
		EXTI_PtrArrFunc[0]();
    1af2:	e0 91 8c 00 	lds	r30, 0x008C
    1af6:	f0 91 8d 00 	lds	r31, 0x008D
    1afa:	09 95       	icall
	}
}
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	0f 90       	pop	r0
    1b1e:	1f 90       	pop	r1
    1b20:	18 95       	reti

00001b22 <__vector_2>:


ISR(VECT_INT1)
{
    1b22:	1f 92       	push	r1
    1b24:	0f 92       	push	r0
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	0f 92       	push	r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	2f 93       	push	r18
    1b2e:	3f 93       	push	r19
    1b30:	4f 93       	push	r20
    1b32:	5f 93       	push	r21
    1b34:	6f 93       	push	r22
    1b36:	7f 93       	push	r23
    1b38:	8f 93       	push	r24
    1b3a:	9f 93       	push	r25
    1b3c:	af 93       	push	r26
    1b3e:	bf 93       	push	r27
    1b40:	ef 93       	push	r30
    1b42:	ff 93       	push	r31
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PtrArrFunc[1] !=NULL)
    1b4c:	80 91 8e 00 	lds	r24, 0x008E
    1b50:	90 91 8f 00 	lds	r25, 0x008F
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	29 f0       	breq	.+10     	; 0x1b62 <__vector_2+0x40>
	{
		EXTI_PtrArrFunc[1]();
    1b58:	e0 91 8e 00 	lds	r30, 0x008E
    1b5c:	f0 91 8f 00 	lds	r31, 0x008F
    1b60:	09 95       	icall
	}
}
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	ff 91       	pop	r31
    1b68:	ef 91       	pop	r30
    1b6a:	bf 91       	pop	r27
    1b6c:	af 91       	pop	r26
    1b6e:	9f 91       	pop	r25
    1b70:	8f 91       	pop	r24
    1b72:	7f 91       	pop	r23
    1b74:	6f 91       	pop	r22
    1b76:	5f 91       	pop	r21
    1b78:	4f 91       	pop	r20
    1b7a:	3f 91       	pop	r19
    1b7c:	2f 91       	pop	r18
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <__vector_3>:


ISR(VECT_INT2)
{
    1b88:	1f 92       	push	r1
    1b8a:	0f 92       	push	r0
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	0f 92       	push	r0
    1b90:	11 24       	eor	r1, r1
    1b92:	2f 93       	push	r18
    1b94:	3f 93       	push	r19
    1b96:	4f 93       	push	r20
    1b98:	5f 93       	push	r21
    1b9a:	6f 93       	push	r22
    1b9c:	7f 93       	push	r23
    1b9e:	8f 93       	push	r24
    1ba0:	9f 93       	push	r25
    1ba2:	af 93       	push	r26
    1ba4:	bf 93       	push	r27
    1ba6:	ef 93       	push	r30
    1ba8:	ff 93       	push	r31
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PtrArrFunc[2] !=NULL)
    1bb2:	80 91 90 00 	lds	r24, 0x0090
    1bb6:	90 91 91 00 	lds	r25, 0x0091
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	29 f0       	breq	.+10     	; 0x1bc8 <__vector_3+0x40>
	{
		EXTI_PtrArrFunc[2] ();
    1bbe:	e0 91 90 00 	lds	r30, 0x0090
    1bc2:	f0 91 91 00 	lds	r31, 0x0091
    1bc6:	09 95       	icall
	}
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	ff 91       	pop	r31
    1bce:	ef 91       	pop	r30
    1bd0:	bf 91       	pop	r27
    1bd2:	af 91       	pop	r26
    1bd4:	9f 91       	pop	r25
    1bd6:	8f 91       	pop	r24
    1bd8:	7f 91       	pop	r23
    1bda:	6f 91       	pop	r22
    1bdc:	5f 91       	pop	r21
    1bde:	4f 91       	pop	r20
    1be0:	3f 91       	pop	r19
    1be2:	2f 91       	pop	r18
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	0f 90       	pop	r0
    1bea:	1f 90       	pop	r1
    1bec:	18 95       	reti

00001bee <EnableGlobalEnterrupt>:
//#include "bit_math.h"

#include "GIE.h"

void EnableGlobalEnterrupt(void)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1bf6:	af e5       	ldi	r26, 0x5F	; 95
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	ef e5       	ldi	r30, 0x5F	; 95
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 68       	ori	r24, 0x80	; 128
    1c02:	8c 93       	st	X, r24
	//sei
	//instruction in assembly to open global interrupt
}
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <DisableGlobalEnterrupt>:
void DisableGlobalEnterrupt(void)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    1c12:	af e5       	ldi	r26, 0x5F	; 95
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ef e5       	ldi	r30, 0x5F	; 95
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8f 77       	andi	r24, 0x7F	; 127
    1c1e:	8c 93       	st	X, r24
	//cli
	//instruction in assembly to close global interrupt
}
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <LCD_enuInit>:
#include "util/delay.h"



ES_t LCD_enuInit(void)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	e9 97       	sbiw	r28, 0x39	; 57
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1c3a:	19 ae       	std	Y+57, r1	; 0x39

	Local_enuErrorState =DIO_enuSetPinDirection(RS_PORT , RS_PIN , DIO_u8OUTPUT);
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	65 e0       	ldi	r22, 0x05	; 5
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1c46:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorState =DIO_enuSetPinDirection(RW_PORT , RW_PIN , DIO_u8OUTPUT);
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	66 e0       	ldi	r22, 0x06	; 6
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1c52:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorState =DIO_enuSetPinDirection(EN_PORT , EN_PIN , DIO_u8OUTPUT);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	67 e0       	ldi	r22, 0x07	; 7
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1c5e:	89 af       	std	Y+57, r24	; 0x39

	Local_enuErrorState =DIO_enuSetPinDirection(D7_PORT , D7_PIN , DIO_u8OUTPUT);
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	67 e0       	ldi	r22, 0x07	; 7
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1c6a:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorState =DIO_enuSetPinDirection(D6_PORT , D6_PIN , DIO_u8OUTPUT);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	66 e0       	ldi	r22, 0x06	; 6
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1c76:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorState =DIO_enuSetPinDirection(D5_PORT , D5_PIN , DIO_u8OUTPUT);
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	65 e0       	ldi	r22, 0x05	; 5
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1c82:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorState =DIO_enuSetPinDirection(D4_PORT , D4_PIN , DIO_u8OUTPUT);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	64 e0       	ldi	r22, 0x04	; 4
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1c8e:	89 af       	std	Y+57, r24	; 0x39


#if (LCD_MODE == EIGHT_BIT_MODE)
	Local_enuErrorState =DIO_enuSetPinDirection(D3_PORT , D3_PIN , DIO_u8OUTPUT);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	63 e0       	ldi	r22, 0x03	; 3
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1c9a:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorState =DIO_enuSetPinDirection(D2_PORT , D2_PIN , DIO_u8OUTPUT);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	62 e0       	ldi	r22, 0x02	; 2
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1ca6:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorState =DIO_enuSetPinDirection(D1_PORT , D1_PIN , DIO_u8OUTPUT);
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1cb2:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorState =DIO_enuSetPinDirection(D0_PORT , D0_PIN , DIO_u8OUTPUT);
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_enuSetPinDirection>
    1cbe:	89 af       	std	Y+57, r24	; 0x39
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	ac e0       	ldi	r26, 0x0C	; 12
    1cc6:	b2 e4       	ldi	r27, 0x42	; 66
    1cc8:	8d ab       	std	Y+53, r24	; 0x35
    1cca:	9e ab       	std	Y+54, r25	; 0x36
    1ccc:	af ab       	std	Y+55, r26	; 0x37
    1cce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a e7       	ldi	r20, 0x7A	; 122
    1cde:	53 e4       	ldi	r21, 0x43	; 67
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	89 ab       	std	Y+49, r24	; 0x31
    1cea:	9a ab       	std	Y+50, r25	; 0x32
    1cec:	ab ab       	std	Y+51, r26	; 0x33
    1cee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <LCD_enuInit+0xec>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	98 ab       	std	Y+48, r25	; 0x30
    1d0e:	8f a7       	std	Y+47, r24	; 0x2f
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <LCD_enuInit+0x16a>
	else if (__tmp > 65535)
    1d12:	69 a9       	ldd	r22, Y+49	; 0x31
    1d14:	7a a9       	ldd	r23, Y+50	; 0x32
    1d16:	8b a9       	ldd	r24, Y+51	; 0x33
    1d18:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <LCD_enuInit+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d2c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d2e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d30:	98 ad       	ldd	r25, Y+56	; 0x38
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	98 ab       	std	Y+48, r25	; 0x30
    1d50:	8f a7       	std	Y+47, r24	; 0x2f
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <LCD_enuInit+0x14c>
    1d54:	89 e1       	ldi	r24, 0x19	; 25
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9e a7       	std	Y+46, r25	; 0x2e
    1d5a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_enuInit+0x13a>
    1d64:	9e a7       	std	Y+46, r25	; 0x2e
    1d66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	98 ab       	std	Y+48, r25	; 0x30
    1d70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d74:	98 a9       	ldd	r25, Y+48	; 0x30
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <LCD_enuInit+0x12e>
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <LCD_enuInit+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d80:	8b a9       	ldd	r24, Y+51	; 0x33
    1d82:	9c a9       	ldd	r25, Y+52	; 0x34
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	98 ab       	std	Y+48, r25	; 0x30
    1d8e:	8f a7       	std	Y+47, r24	; 0x2f
    1d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d92:	98 a9       	ldd	r25, Y+48	; 0x30
    1d94:	9c a7       	std	Y+44, r25	; 0x2c
    1d96:	8b a7       	std	Y+43, r24	; 0x2b
    1d98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_enuInit+0x176>
    1da0:	9c a7       	std	Y+44, r25	; 0x2c
    1da2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

	Local_enuErrorState = LCD_enuSendCommand(0x38);
    1da4:	88 e3       	ldi	r24, 0x38	; 56
    1da6:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
    1daa:	89 af       	std	Y+57, r24	; 0x39
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e8       	ldi	r26, 0x80	; 128
    1db2:	bf e3       	ldi	r27, 0x3F	; 63
    1db4:	8f a3       	std	Y+39, r24	; 0x27
    1db6:	98 a7       	std	Y+40, r25	; 0x28
    1db8:	a9 a7       	std	Y+41, r26	; 0x29
    1dba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a e7       	ldi	r20, 0x7A	; 122
    1dca:	53 e4       	ldi	r21, 0x43	; 67
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8b a3       	std	Y+35, r24	; 0x23
    1dd6:	9c a3       	std	Y+36, r25	; 0x24
    1dd8:	ad a3       	std	Y+37, r26	; 0x25
    1dda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ddc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dde:	7c a1       	ldd	r23, Y+36	; 0x24
    1de0:	8d a1       	ldd	r24, Y+37	; 0x25
    1de2:	9e a1       	ldd	r25, Y+38	; 0x26
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <LCD_enuInit+0x1d8>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9a a3       	std	Y+34, r25	; 0x22
    1dfa:	89 a3       	std	Y+33, r24	; 0x21
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <LCD_enuInit+0x256>
	else if (__tmp > 65535)
    1dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1e00:	7c a1       	ldd	r23, Y+36	; 0x24
    1e02:	8d a1       	ldd	r24, Y+37	; 0x25
    1e04:	9e a1       	ldd	r25, Y+38	; 0x26
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <LCD_enuInit+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6f a1       	ldd	r22, Y+39	; 0x27
    1e18:	78 a5       	ldd	r23, Y+40	; 0x28
    1e1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9a a3       	std	Y+34, r25	; 0x22
    1e3c:	89 a3       	std	Y+33, r24	; 0x21
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <LCD_enuInit+0x238>
    1e40:	89 e1       	ldi	r24, 0x19	; 25
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	98 a3       	std	Y+32, r25	; 0x20
    1e46:	8f 8f       	std	Y+31, r24	; 0x1f
    1e48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e4a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_enuInit+0x226>
    1e50:	98 a3       	std	Y+32, r25	; 0x20
    1e52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	89 a1       	ldd	r24, Y+33	; 0x21
    1e56:	9a a1       	ldd	r25, Y+34	; 0x22
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9a a3       	std	Y+34, r25	; 0x22
    1e5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e60:	9a a1       	ldd	r25, Y+34	; 0x22
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <LCD_enuInit+0x21a>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <LCD_enuInit+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9a a3       	std	Y+34, r25	; 0x22
    1e7a:	89 a3       	std	Y+33, r24	; 0x21
    1e7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e80:	9e 8f       	std	Y+30, r25	; 0x1e
    1e82:	8d 8f       	std	Y+29, r24	; 0x1d
    1e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_enuInit+0x262>
    1e8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e8e:	8d 8f       	std	Y+29, r24	; 0x1d
#error"WRONG MODE SELECTION"

#endif

	_delay_ms(1);
	Local_enuErrorState = LCD_enuSendCommand(0x0F);
    1e90:	8f e0       	ldi	r24, 0x0F	; 15
    1e92:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
    1e96:	89 af       	std	Y+57, r24	; 0x39
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e8       	ldi	r26, 0x80	; 128
    1e9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ea0:	89 8f       	std	Y+25, r24	; 0x19
    1ea2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ea4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ea6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a e7       	ldi	r20, 0x7A	; 122
    1eb6:	53 e4       	ldi	r21, 0x43	; 67
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8d 8b       	std	Y+21, r24	; 0x15
    1ec2:	9e 8b       	std	Y+22, r25	; 0x16
    1ec4:	af 8b       	std	Y+23, r26	; 0x17
    1ec6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ece:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_enuInit+0x2c4>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9c 8b       	std	Y+20, r25	; 0x14
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <LCD_enuInit+0x342>
	else if (__tmp > 65535)
    1eea:	6d 89       	ldd	r22, Y+21	; 0x15
    1eec:	7e 89       	ldd	r23, Y+22	; 0x16
    1eee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <LCD_enuInit+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	69 8d       	ldd	r22, Y+25	; 0x19
    1f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9c 8b       	std	Y+20, r25	; 0x14
    1f28:	8b 8b       	std	Y+19, r24	; 0x13
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <LCD_enuInit+0x324>
    1f2c:	89 e1       	ldi	r24, 0x19	; 25
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9a 8b       	std	Y+18, r25	; 0x12
    1f32:	89 8b       	std	Y+17, r24	; 0x11
    1f34:	89 89       	ldd	r24, Y+17	; 0x11
    1f36:	9a 89       	ldd	r25, Y+18	; 0x12
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_enuInit+0x312>
    1f3c:	9a 8b       	std	Y+18, r25	; 0x12
    1f3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8b 89       	ldd	r24, Y+19	; 0x13
    1f42:	9c 89       	ldd	r25, Y+20	; 0x14
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9c 8b       	std	Y+20, r25	; 0x14
    1f48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <LCD_enuInit+0x306>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <LCD_enuInit+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6d 89       	ldd	r22, Y+21	; 0x15
    1f56:	7e 89       	ldd	r23, Y+22	; 0x16
    1f58:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9c 8b       	std	Y+20, r25	; 0x14
    1f66:	8b 8b       	std	Y+19, r24	; 0x13
    1f68:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6c:	98 8b       	std	Y+16, r25	; 0x10
    1f6e:	8f 87       	std	Y+15, r24	; 0x0f
    1f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f72:	98 89       	ldd	r25, Y+16	; 0x10
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_enuInit+0x34e>
    1f78:	98 8b       	std	Y+16, r25	; 0x10
    1f7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Local_enuErrorState = LCD_enuSendCommand(0x01);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
    1f82:	89 af       	std	Y+57, r24	; 0x39
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e0       	ldi	r26, 0x00	; 0
    1f8a:	b0 e4       	ldi	r27, 0x40	; 64
    1f8c:	8b 87       	std	Y+11, r24	; 0x0b
    1f8e:	9c 87       	std	Y+12, r25	; 0x0c
    1f90:	ad 87       	std	Y+13, r26	; 0x0d
    1f92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a e7       	ldi	r20, 0x7A	; 122
    1fa2:	53 e4       	ldi	r21, 0x43	; 67
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8f 83       	std	Y+7, r24	; 0x07
    1fae:	98 87       	std	Y+8, r25	; 0x08
    1fb0:	a9 87       	std	Y+9, r26	; 0x09
    1fb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <LCD_enuInit+0x3b0>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	3f c0       	rjmp	.+126    	; 0x2054 <LCD_enuInit+0x42e>
	else if (__tmp > 65535)
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	4c f5       	brge	.+82     	; 0x2040 <LCD_enuInit+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <LCD_enuInit+0x410>
    2018:	89 e1       	ldi	r24, 0x19	; 25
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_enuInit+0x3fe>
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	69 f7       	brne	.-38     	; 0x2018 <LCD_enuInit+0x3f2>
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <LCD_enuInit+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_enuInit+0x43a>
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Local_enuErrorState = LCD_enuSendCommand(0x06);
    2068:	86 e0       	ldi	r24, 0x06	; 6
    206a:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
    206e:	89 af       	std	Y+57, r24	; 0x39
    Local_enuErrorState = LCD_enuSendCommand(0x80);
    2070:	80 e8       	ldi	r24, 0x80	; 128
    2072:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
    2076:	89 af       	std	Y+57, r24	; 0x39

	return Local_enuErrorState;
    2078:	89 ad       	ldd	r24, Y+57	; 0x39
}
    207a:	e9 96       	adiw	r28, 0x39	; 57
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <LCD_enuDisplayChar>:



ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	60 97       	sbiw	r28, 0x10	; 16
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    20a2:	1f 86       	std	Y+15, r1	; 0x0f

	/*		LOGICAL PINS		*/
	Local_enuErrorState =DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	65 e0       	ldi	r22, 0x05	; 5
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	66 e0       	ldi	r22, 0x06	; 6
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    20ba:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	67 e0       	ldi	r22, 0x07	; 7
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    20c6:	8f 87       	std	Y+15, r24	; 0x0f

	/*		 DATA PINS			*/
	Local_enuErrorState =DIO_enuSetPinValue(D7_PORT , D7_PIN , ( ((Copy_u8Data)>>7)&1) );
    20c8:	88 89       	ldd	r24, Y+16	; 0x10
    20ca:	98 2f       	mov	r25, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	99 27       	eor	r25, r25
    20d0:	99 1f       	adc	r25, r25
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	67 e0       	ldi	r22, 0x07	; 7
    20d6:	49 2f       	mov	r20, r25
    20d8:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    20dc:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D6_PORT , D6_PIN , ( ((Copy_u8Data)>>6)&1) );
    20de:	88 89       	ldd	r24, Y+16	; 0x10
    20e0:	82 95       	swap	r24
    20e2:	86 95       	lsr	r24
    20e4:	86 95       	lsr	r24
    20e6:	83 70       	andi	r24, 0x03	; 3
    20e8:	98 2f       	mov	r25, r24
    20ea:	91 70       	andi	r25, 0x01	; 1
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	66 e0       	ldi	r22, 0x06	; 6
    20f0:	49 2f       	mov	r20, r25
    20f2:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    20f6:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D5_PORT , D5_PIN , ( ((Copy_u8Data)>>5)&1) );
    20f8:	88 89       	ldd	r24, Y+16	; 0x10
    20fa:	82 95       	swap	r24
    20fc:	86 95       	lsr	r24
    20fe:	87 70       	andi	r24, 0x07	; 7
    2100:	98 2f       	mov	r25, r24
    2102:	91 70       	andi	r25, 0x01	; 1
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	65 e0       	ldi	r22, 0x05	; 5
    2108:	49 2f       	mov	r20, r25
    210a:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    210e:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D4_PORT , D4_PIN , ( ((Copy_u8Data)>>4)&1) );
    2110:	88 89       	ldd	r24, Y+16	; 0x10
    2112:	82 95       	swap	r24
    2114:	8f 70       	andi	r24, 0x0F	; 15
    2116:	98 2f       	mov	r25, r24
    2118:	91 70       	andi	r25, 0x01	; 1
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	64 e0       	ldi	r22, 0x04	; 4
    211e:	49 2f       	mov	r20, r25
    2120:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2124:	8f 87       	std	Y+15, r24	; 0x0f
#if (LCD_MODE == EIGHT_BIT_MODE)
	Local_enuErrorState =DIO_enuSetPinValue(D3_PORT , D3_PIN , ( ((Copy_u8Data)>>3)&1) );
    2126:	88 89       	ldd	r24, Y+16	; 0x10
    2128:	86 95       	lsr	r24
    212a:	86 95       	lsr	r24
    212c:	86 95       	lsr	r24
    212e:	98 2f       	mov	r25, r24
    2130:	91 70       	andi	r25, 0x01	; 1
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	63 e0       	ldi	r22, 0x03	; 3
    2136:	49 2f       	mov	r20, r25
    2138:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    213c:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D2_PORT , D2_PIN , ( ((Copy_u8Data)>>2)&1) );
    213e:	88 89       	ldd	r24, Y+16	; 0x10
    2140:	86 95       	lsr	r24
    2142:	86 95       	lsr	r24
    2144:	98 2f       	mov	r25, r24
    2146:	91 70       	andi	r25, 0x01	; 1
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	62 e0       	ldi	r22, 0x02	; 2
    214c:	49 2f       	mov	r20, r25
    214e:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2152:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D1_PORT , D1_PIN , ( ((Copy_u8Data)>>1)&1) );
    2154:	88 89       	ldd	r24, Y+16	; 0x10
    2156:	86 95       	lsr	r24
    2158:	98 2f       	mov	r25, r24
    215a:	91 70       	andi	r25, 0x01	; 1
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	49 2f       	mov	r20, r25
    2162:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2166:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D0_PORT , D0_PIN , ( ((Copy_u8Data)>>0)&1) );
    2168:	88 89       	ldd	r24, Y+16	; 0x10
    216a:	98 2f       	mov	r25, r24
    216c:	91 70       	andi	r25, 0x01	; 1
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	49 2f       	mov	r20, r25
    2174:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2178:	8f 87       	std	Y+15, r24	; 0x0f

	// Enable latch
	Local_enuErrorState =DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	67 e0       	ldi	r22, 0x07	; 7
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2184:	8f 87       	std	Y+15, r24	; 0x0f
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a0 e2       	ldi	r26, 0x20	; 32
    218c:	b1 e4       	ldi	r27, 0x41	; 65
    218e:	8b 87       	std	Y+11, r24	; 0x0b
    2190:	9c 87       	std	Y+12, r25	; 0x0c
    2192:	ad 87       	std	Y+13, r26	; 0x0d
    2194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a e7       	ldi	r20, 0x7A	; 122
    21a4:	53 e4       	ldi	r21, 0x43	; 67
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8f 83       	std	Y+7, r24	; 0x07
    21b0:	98 87       	std	Y+8, r25	; 0x08
    21b2:	a9 87       	std	Y+9, r26	; 0x09
    21b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b6:	6f 81       	ldd	r22, Y+7	; 0x07
    21b8:	78 85       	ldd	r23, Y+8	; 0x08
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <LCD_enuDisplayChar+0x14c>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <LCD_enuDisplayChar+0x1ca>
	else if (__tmp > 65535)
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	78 85       	ldd	r23, Y+8	; 0x08
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <LCD_enuDisplayChar+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <LCD_enuDisplayChar+0x1ac>
    221a:	89 e1       	ldi	r24, 0x19	; 25
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_enuDisplayChar+0x19a>
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <LCD_enuDisplayChar+0x18e>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <LCD_enuDisplayChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_enuDisplayChar+0x1d6>
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	Local_enuErrorState =DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	67 e0       	ldi	r22, 0x07	; 7
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2274:	8f 87       	std	Y+15, r24	; 0x0f
#else
#error"WRONG MODE SELECTION"

#endif

	return Local_enuErrorState;
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2278:	60 96       	adiw	r28, 0x10	; 16
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <LCD_enuSendCommand>:



ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	60 97       	sbiw	r28, 0x10	; 16
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    22a0:	1f 86       	std	Y+15, r1	; 0x0f

	/*		LOGICAL PINS		*/
	Local_enuErrorState =DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	65 e0       	ldi	r22, 0x05	; 5
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    22ac:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	66 e0       	ldi	r22, 0x06	; 6
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    22b8:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	67 e0       	ldi	r22, 0x07	; 7
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    22c4:	8f 87       	std	Y+15, r24	; 0x0f

	/*		 DATA PINS			*/
	Local_enuErrorState =DIO_enuSetPinValue(D7_PORT , D7_PIN , ( ((Copy_u8Command)>>7)&1) );
    22c6:	88 89       	ldd	r24, Y+16	; 0x10
    22c8:	98 2f       	mov	r25, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	99 27       	eor	r25, r25
    22ce:	99 1f       	adc	r25, r25
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	67 e0       	ldi	r22, 0x07	; 7
    22d4:	49 2f       	mov	r20, r25
    22d6:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    22da:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D6_PORT , D6_PIN , ( ((Copy_u8Command)>>6)&1) );
    22dc:	88 89       	ldd	r24, Y+16	; 0x10
    22de:	82 95       	swap	r24
    22e0:	86 95       	lsr	r24
    22e2:	86 95       	lsr	r24
    22e4:	83 70       	andi	r24, 0x03	; 3
    22e6:	98 2f       	mov	r25, r24
    22e8:	91 70       	andi	r25, 0x01	; 1
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	66 e0       	ldi	r22, 0x06	; 6
    22ee:	49 2f       	mov	r20, r25
    22f0:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    22f4:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D5_PORT , D5_PIN , ( ((Copy_u8Command)>>5)&1) );
    22f6:	88 89       	ldd	r24, Y+16	; 0x10
    22f8:	82 95       	swap	r24
    22fa:	86 95       	lsr	r24
    22fc:	87 70       	andi	r24, 0x07	; 7
    22fe:	98 2f       	mov	r25, r24
    2300:	91 70       	andi	r25, 0x01	; 1
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	65 e0       	ldi	r22, 0x05	; 5
    2306:	49 2f       	mov	r20, r25
    2308:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    230c:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D4_PORT , D4_PIN , ( ((Copy_u8Command)>>4)&1) );
    230e:	88 89       	ldd	r24, Y+16	; 0x10
    2310:	82 95       	swap	r24
    2312:	8f 70       	andi	r24, 0x0F	; 15
    2314:	98 2f       	mov	r25, r24
    2316:	91 70       	andi	r25, 0x01	; 1
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	64 e0       	ldi	r22, 0x04	; 4
    231c:	49 2f       	mov	r20, r25
    231e:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2322:	8f 87       	std	Y+15, r24	; 0x0f

#if (LCD_MODE == EIGHT_BIT_MODE)
	Local_enuErrorState =DIO_enuSetPinValue(D3_PORT , D3_PIN , ( ((Copy_u8Command)>>3)&1) );
    2324:	88 89       	ldd	r24, Y+16	; 0x10
    2326:	86 95       	lsr	r24
    2328:	86 95       	lsr	r24
    232a:	86 95       	lsr	r24
    232c:	98 2f       	mov	r25, r24
    232e:	91 70       	andi	r25, 0x01	; 1
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	63 e0       	ldi	r22, 0x03	; 3
    2334:	49 2f       	mov	r20, r25
    2336:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    233a:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D2_PORT , D2_PIN , ( ((Copy_u8Command)>>2)&1) );
    233c:	88 89       	ldd	r24, Y+16	; 0x10
    233e:	86 95       	lsr	r24
    2340:	86 95       	lsr	r24
    2342:	98 2f       	mov	r25, r24
    2344:	91 70       	andi	r25, 0x01	; 1
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	62 e0       	ldi	r22, 0x02	; 2
    234a:	49 2f       	mov	r20, r25
    234c:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2350:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D1_PORT , D1_PIN , ( ((Copy_u8Command)>>1)&1) );
    2352:	88 89       	ldd	r24, Y+16	; 0x10
    2354:	86 95       	lsr	r24
    2356:	98 2f       	mov	r25, r24
    2358:	91 70       	andi	r25, 0x01	; 1
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	49 2f       	mov	r20, r25
    2360:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2364:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuErrorState =DIO_enuSetPinValue(D0_PORT , D0_PIN , ( ((Copy_u8Command)>>0)&1) );
    2366:	88 89       	ldd	r24, Y+16	; 0x10
    2368:	98 2f       	mov	r25, r24
    236a:	91 70       	andi	r25, 0x01	; 1
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	49 2f       	mov	r20, r25
    2372:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2376:	8f 87       	std	Y+15, r24	; 0x0f

	// Enable latch
	Local_enuErrorState =DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	67 e0       	ldi	r22, 0x07	; 7
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2382:	8f 87       	std	Y+15, r24	; 0x0f
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 e2       	ldi	r26, 0x20	; 32
    238a:	b1 e4       	ldi	r27, 0x41	; 65
    238c:	8b 87       	std	Y+11, r24	; 0x0b
    238e:	9c 87       	std	Y+12, r25	; 0x0c
    2390:	ad 87       	std	Y+13, r26	; 0x0d
    2392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6b 85       	ldd	r22, Y+11	; 0x0b
    2396:	7c 85       	ldd	r23, Y+12	; 0x0c
    2398:	8d 85       	ldd	r24, Y+13	; 0x0d
    239a:	9e 85       	ldd	r25, Y+14	; 0x0e
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a e7       	ldi	r20, 0x7A	; 122
    23a2:	53 e4       	ldi	r21, 0x43	; 67
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8f 83       	std	Y+7, r24	; 0x07
    23ae:	98 87       	std	Y+8, r25	; 0x08
    23b0:	a9 87       	std	Y+9, r26	; 0x09
    23b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <LCD_enuSendCommand+0x14c>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <LCD_enuSendCommand+0x1ca>
	else if (__tmp > 65535)
    23d6:	6f 81       	ldd	r22, Y+7	; 0x07
    23d8:	78 85       	ldd	r23, Y+8	; 0x08
    23da:	89 85       	ldd	r24, Y+9	; 0x09
    23dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <LCD_enuSendCommand+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_enuSendCommand+0x1ac>
    2418:	89 e1       	ldi	r24, 0x19	; 25
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_enuSendCommand+0x19a>
    2428:	9c 83       	std	Y+4, r25	; 0x04
    242a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <LCD_enuSendCommand+0x18e>
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <LCD_enuSendCommand+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_enuSendCommand+0x1d6>
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	Local_enuErrorState =DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	67 e0       	ldi	r22, 0x07	; 7
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 0a 08 	call	0x1014	; 0x1014 <DIO_enuSetPinValue>
    2472:	8f 87       	std	Y+15, r24	; 0x0f
#else
#error"WRONG MODE SELECTION"

#endif

	return Local_enuErrorState;
    2474:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2476:	60 96       	adiw	r28, 0x10	; 16
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	08 95       	ret

00002488 <LCD_enuSendString>:



ES_t LCD_enuSendString(const char* Copy_pcString)
{
    2488:	df 93       	push	r29
    248a:	cf 93       	push	r28
    248c:	00 d0       	rcall	.+0      	; 0x248e <LCD_enuSendString+0x6>
    248e:	00 d0       	rcall	.+0      	; 0x2490 <LCD_enuSendString+0x8>
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	9c 83       	std	Y+4, r25	; 0x04
    2496:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2498:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_pcString != NULL)
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	e9 f0       	breq	.+58     	; 0x24dc <LCD_enuSendString+0x54>
{
	u8 Local_u8Iterator=0;
    24a2:	19 82       	std	Y+1, r1	; 0x01
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <LCD_enuSendString+0x3c>
	while(Copy_pcString[Local_u8Iterator]!='\0')
	{
		Local_enuErrorState = LCD_enuDisplayChar(Copy_pcString[Local_u8Iterator]);
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	fc 01       	movw	r30, r24
    24b2:	e2 0f       	add	r30, r18
    24b4:	f3 1f       	adc	r31, r19
    24b6:	80 81       	ld	r24, Z
    24b8:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_enuDisplayChar>
    24bc:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Iterator ++;
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	8f 5f       	subi	r24, 0xFF	; 255
    24c2:	89 83       	std	Y+1, r24	; 0x01
{
	ES_t Local_enuErrorState = ES_NOK;
if(Copy_pcString != NULL)
{
	u8 Local_u8Iterator=0;
	while(Copy_pcString[Local_u8Iterator]!='\0')
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	fc 01       	movw	r30, r24
    24d0:	e2 0f       	add	r30, r18
    24d2:	f3 1f       	adc	r31, r19
    24d4:	80 81       	ld	r24, Z
    24d6:	88 23       	and	r24, r24
    24d8:	31 f7       	brne	.-52     	; 0x24a6 <LCD_enuSendString+0x1e>
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <LCD_enuSendString+0x58>
	}

}
else
{
	Local_enuErrorState=ES_NULL_POINTER;
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	8a 83       	std	Y+2, r24	; 0x02
}

	return Local_enuErrorState;
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <LCD_enuGoToXY>:



ES_t LCD_enuGoToXY(u8 Copy_u8X , u8 Copy_u8Y)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <LCD_enuGoToXY+0x6>
    24f6:	0f 92       	push	r0
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	8a 83       	std	Y+2, r24	; 0x02
    24fe:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2500:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8X== 0)
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	88 23       	and	r24, r24
    2506:	31 f4       	brne	.+12     	; 0x2514 <LCD_enuGoToXY+0x24>
	{
		Local_enuErrorState = LCD_enuSendCommand((0x80)+Copy_u8Y);
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	80 58       	subi	r24, 0x80	; 128
    250c:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	0b c0       	rjmp	.+22     	; 0x252a <LCD_enuGoToXY+0x3a>
	}
	else if(Copy_u8X== 1)
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	31 f4       	brne	.+12     	; 0x2526 <LCD_enuGoToXY+0x36>
	{
		Local_enuErrorState = LCD_enuSendCommand((0xC0)+Copy_u8Y);
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	80 54       	subi	r24, 0x40	; 64
    251e:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	02 c0       	rjmp	.+4      	; 0x252a <LCD_enuGoToXY+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    252a:	89 81       	ldd	r24, Y+1	; 0x01
}
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <LCD_enuSaveSpecialChar>:



ES_t LCD_enuSaveSpecialChar(u8 * Copy_pu8Arr,u8 Copy_u8Pattern_num )
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <LCD_enuSaveSpecialChar+0x6>
    253e:	00 d0       	rcall	.+0      	; 0x2540 <LCD_enuSaveSpecialChar+0x8>
    2540:	0f 92       	push	r0
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	9c 83       	std	Y+4, r25	; 0x04
    2548:	8b 83       	std	Y+3, r24	; 0x03
    254a:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    254c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8Arr != NULL)
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	49 f1       	breq	.+82     	; 0x25a8 <LCD_enuSaveSpecialChar+0x70>
	{
		if(Copy_u8Pattern_num<=Pattern7)
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	88 30       	cpi	r24, 0x08	; 8
    255a:	18 f5       	brcc	.+70     	; 0x25a2 <LCD_enuSaveSpecialChar+0x6a>
		{
			Local_enuErrorState =LCD_enuSendCommand((8*Copy_u8Pattern_num)+0x40);
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	88 2f       	mov	r24, r24
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	08 96       	adiw	r24, 0x08	; 8
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
    2574:	8a 83       	std	Y+2, r24	; 0x02
			u8 Local_u8Iterator=0;
    2576:	19 82       	std	Y+1, r1	; 0x01
			for(Local_u8Iterator =0 ;Local_u8Iterator<8 ; Local_u8Iterator++ )
    2578:	19 82       	std	Y+1, r1	; 0x01
    257a:	0f c0       	rjmp	.+30     	; 0x259a <LCD_enuSaveSpecialChar+0x62>
			{
				Local_enuErrorState =LCD_enuDisplayChar(Copy_pu8Arr[Local_u8Iterator]);
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	fc 01       	movw	r30, r24
    2588:	e2 0f       	add	r30, r18
    258a:	f3 1f       	adc	r31, r19
    258c:	80 81       	ld	r24, Z
    258e:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_enuDisplayChar>
    2592:	8a 83       	std	Y+2, r24	; 0x02
	{
		if(Copy_u8Pattern_num<=Pattern7)
		{
			Local_enuErrorState =LCD_enuSendCommand((8*Copy_u8Pattern_num)+0x40);
			u8 Local_u8Iterator=0;
			for(Local_u8Iterator =0 ;Local_u8Iterator<8 ; Local_u8Iterator++ )
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	88 30       	cpi	r24, 0x08	; 8
    259e:	70 f3       	brcs	.-36     	; 0x257c <LCD_enuSaveSpecialChar+0x44>
    25a0:	05 c0       	rjmp	.+10     	; 0x25ac <LCD_enuSaveSpecialChar+0x74>
//			Local_enuErrorState =LCD_enuGoToXY(Copy_u8X , Copy_u8Y);
//			Local_enuErrorState =LCD_enuDisplayChar(Copy_u8Pattern_num);
		}
		else
		{
			Local_enuErrorState =ES_OUT_OF_RANGE;
    25a2:	83 e0       	ldi	r24, 0x03	; 3
    25a4:	8a 83       	std	Y+2, r24	; 0x02
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <LCD_enuSaveSpecialChar+0x74>
		}
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <LCD_enuDisplaySpecialChar>:



ES_t LCD_enuDisplaySpecialChar(u8 Copy_u8Pattern_num, u8 Copy_u8X , u8 Copy_u8Y)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <LCD_enuDisplaySpecialChar+0x6>
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <LCD_enuDisplaySpecialChar+0x8>
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	8a 83       	std	Y+2, r24	; 0x02
    25cc:	6b 83       	std	Y+3, r22	; 0x03
    25ce:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    25d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pattern_num<=Pattern7)
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	88 30       	cpi	r24, 0x08	; 8
    25d6:	50 f4       	brcc	.+20     	; 0x25ec <LCD_enuDisplaySpecialChar+0x2e>
	{
	Local_enuErrorState =LCD_enuGoToXY(Copy_u8X , Copy_u8Y);
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	6c 81       	ldd	r22, Y+4	; 0x04
    25dc:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
    25e0:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState =LCD_enuDisplayChar(Copy_u8Pattern_num);
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_enuDisplayChar>
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <LCD_enuDisplaySpecialChar+0x32>
	}
	else
	{
		Local_enuErrorState =ES_OUT_OF_RANGE;
    25ec:	83 e0       	ldi	r24, 0x03	; 3
    25ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <LCD_enuWriteNum>:



ES_t LCD_enuWriteNum(s32 Copy_s32Num)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	2e 97       	sbiw	r28, 0x0e	; 14
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	6b 87       	std	Y+11, r22	; 0x0b
    2616:	7c 87       	std	Y+12, r23	; 0x0c
    2618:	8d 87       	std	Y+13, r24	; 0x0d
    261a:	9e 87       	std	Y+14, r25	; 0x0e
	ES_t Local_enuErrorState = ES_NOK;
    261c:	1a 86       	std	Y+10, r1	; 0x0a
	u32 Local_u32FinalNum=0 , Local_u32Num=0;
    261e:	1e 82       	std	Y+6, r1	; 0x06
    2620:	1f 82       	std	Y+7, r1	; 0x07
    2622:	18 86       	std	Y+8, r1	; 0x08
    2624:	19 86       	std	Y+9, r1	; 0x09
    2626:	1a 82       	std	Y+2, r1	; 0x02
    2628:	1b 82       	std	Y+3, r1	; 0x03
    262a:	1c 82       	std	Y+4, r1	; 0x04
    262c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8NumDigit=0;
    262e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_s32Num<0)
    2630:	8b 85       	ldd	r24, Y+11	; 0x0b
    2632:	9c 85       	ldd	r25, Y+12	; 0x0c
    2634:	ad 85       	ldd	r26, Y+13	; 0x0d
    2636:	be 85       	ldd	r27, Y+14	; 0x0e
    2638:	bb 23       	and	r27, r27
    263a:	9c f4       	brge	.+38     	; 0x2662 <LCD_enuWriteNum+0x62>
	{
		Copy_s32Num*=-1;
    263c:	8b 85       	ldd	r24, Y+11	; 0x0b
    263e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2640:	ad 85       	ldd	r26, Y+13	; 0x0d
    2642:	be 85       	ldd	r27, Y+14	; 0x0e
    2644:	b0 95       	com	r27
    2646:	a0 95       	com	r26
    2648:	90 95       	com	r25
    264a:	81 95       	neg	r24
    264c:	9f 4f       	sbci	r25, 0xFF	; 255
    264e:	af 4f       	sbci	r26, 0xFF	; 255
    2650:	bf 4f       	sbci	r27, 0xFF	; 255
    2652:	8b 87       	std	Y+11, r24	; 0x0b
    2654:	9c 87       	std	Y+12, r25	; 0x0c
    2656:	ad 87       	std	Y+13, r26	; 0x0d
    2658:	be 87       	std	Y+14, r27	; 0x0e
		Local_enuErrorState =LCD_enuDisplayChar('-');
    265a:	8d e2       	ldi	r24, 0x2D	; 45
    265c:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_enuDisplayChar>
    2660:	8a 87       	std	Y+10, r24	; 0x0a
	}
	if(Copy_s32Num!=0)
    2662:	8b 85       	ldd	r24, Y+11	; 0x0b
    2664:	9c 85       	ldd	r25, Y+12	; 0x0c
    2666:	ad 85       	ldd	r26, Y+13	; 0x0d
    2668:	be 85       	ldd	r27, Y+14	; 0x0e
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	a1 05       	cpc	r26, r1
    266e:	b1 05       	cpc	r27, r1
    2670:	09 f4       	brne	.+2      	; 0x2674 <LCD_enuWriteNum+0x74>
    2672:	7d c0       	rjmp	.+250    	; 0x276e <LCD_enuWriteNum+0x16e>
    2674:	41 c0       	rjmp	.+130    	; 0x26f8 <LCD_enuWriteNum+0xf8>
	{
	while(Copy_s32Num>0)
	{
		Local_u32Num=Copy_s32Num%10;
    2676:	8b 85       	ldd	r24, Y+11	; 0x0b
    2678:	9c 85       	ldd	r25, Y+12	; 0x0c
    267a:	ad 85       	ldd	r26, Y+13	; 0x0d
    267c:	be 85       	ldd	r27, Y+14	; 0x0e
    267e:	2a e0       	ldi	r18, 0x0A	; 10
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <__divmodsi4>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8a 83       	std	Y+2, r24	; 0x02
    2694:	9b 83       	std	Y+3, r25	; 0x03
    2696:	ac 83       	std	Y+4, r26	; 0x04
    2698:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32FinalNum = Local_u32FinalNum*10 + Local_u32Num;
    269a:	8e 81       	ldd	r24, Y+6	; 0x06
    269c:	9f 81       	ldd	r25, Y+7	; 0x07
    269e:	a8 85       	ldd	r26, Y+8	; 0x08
    26a0:	b9 85       	ldd	r27, Y+9	; 0x09
    26a2:	2a e0       	ldi	r18, 0x0A	; 10
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__mulsi3>
    26b2:	9b 01       	movw	r18, r22
    26b4:	ac 01       	movw	r20, r24
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ba:	ac 81       	ldd	r26, Y+4	; 0x04
    26bc:	bd 81       	ldd	r27, Y+5	; 0x05
    26be:	82 0f       	add	r24, r18
    26c0:	93 1f       	adc	r25, r19
    26c2:	a4 1f       	adc	r26, r20
    26c4:	b5 1f       	adc	r27, r21
    26c6:	8e 83       	std	Y+6, r24	; 0x06
    26c8:	9f 83       	std	Y+7, r25	; 0x07
    26ca:	a8 87       	std	Y+8, r26	; 0x08
    26cc:	b9 87       	std	Y+9, r27	; 0x09
		Copy_s32Num/=10;
    26ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    26d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    26d2:	ad 85       	ldd	r26, Y+13	; 0x0d
    26d4:	be 85       	ldd	r27, Y+14	; 0x0e
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <__divmodsi4>
    26e6:	da 01       	movw	r26, r20
    26e8:	c9 01       	movw	r24, r18
    26ea:	8b 87       	std	Y+11, r24	; 0x0b
    26ec:	9c 87       	std	Y+12, r25	; 0x0c
    26ee:	ad 87       	std	Y+13, r26	; 0x0d
    26f0:	be 87       	std	Y+14, r27	; 0x0e
		Local_u8NumDigit ++;
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	8f 5f       	subi	r24, 0xFF	; 255
    26f6:	89 83       	std	Y+1, r24	; 0x01
		Copy_s32Num*=-1;
		Local_enuErrorState =LCD_enuDisplayChar('-');
	}
	if(Copy_s32Num!=0)
	{
	while(Copy_s32Num>0)
    26f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    26fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    26fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    26fe:	be 85       	ldd	r27, Y+14	; 0x0e
    2700:	18 16       	cp	r1, r24
    2702:	19 06       	cpc	r1, r25
    2704:	1a 06       	cpc	r1, r26
    2706:	1b 06       	cpc	r1, r27
    2708:	0c f4       	brge	.+2      	; 0x270c <LCD_enuWriteNum+0x10c>
    270a:	b5 cf       	rjmp	.-150    	; 0x2676 <LCD_enuWriteNum+0x76>
    270c:	2c c0       	rjmp	.+88     	; 0x2766 <LCD_enuWriteNum+0x166>

	}

	while(Local_u8NumDigit)
	{
		Local_u32Num = Local_u32FinalNum%10;
    270e:	8e 81       	ldd	r24, Y+6	; 0x06
    2710:	9f 81       	ldd	r25, Y+7	; 0x07
    2712:	a8 85       	ldd	r26, Y+8	; 0x08
    2714:	b9 85       	ldd	r27, Y+9	; 0x09
    2716:	2a e0       	ldi	r18, 0x0A	; 10
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	bc 01       	movw	r22, r24
    2720:	cd 01       	movw	r24, r26
    2722:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__udivmodsi4>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8a 83       	std	Y+2, r24	; 0x02
    272c:	9b 83       	std	Y+3, r25	; 0x03
    272e:	ac 83       	std	Y+4, r26	; 0x04
    2730:	bd 83       	std	Y+5, r27	; 0x05
		Local_enuErrorState = LCD_enuDisplayChar(Local_u32Num+'0');
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	80 5d       	subi	r24, 0xD0	; 208
    2736:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_enuDisplayChar>
    273a:	8a 87       	std	Y+10, r24	; 0x0a
		Local_u32FinalNum/=10;
    273c:	8e 81       	ldd	r24, Y+6	; 0x06
    273e:	9f 81       	ldd	r25, Y+7	; 0x07
    2740:	a8 85       	ldd	r26, Y+8	; 0x08
    2742:	b9 85       	ldd	r27, Y+9	; 0x09
    2744:	2a e0       	ldi	r18, 0x0A	; 10
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__udivmodsi4>
    2754:	da 01       	movw	r26, r20
    2756:	c9 01       	movw	r24, r18
    2758:	8e 83       	std	Y+6, r24	; 0x06
    275a:	9f 83       	std	Y+7, r25	; 0x07
    275c:	a8 87       	std	Y+8, r26	; 0x08
    275e:	b9 87       	std	Y+9, r27	; 0x09

		Local_u8NumDigit--;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	81 50       	subi	r24, 0x01	; 1
    2764:	89 83       	std	Y+1, r24	; 0x01
		Copy_s32Num/=10;
		Local_u8NumDigit ++;

	}

	while(Local_u8NumDigit)
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	88 23       	and	r24, r24
    276a:	89 f6       	brne	.-94     	; 0x270e <LCD_enuWriteNum+0x10e>
    276c:	04 c0       	rjmp	.+8      	; 0x2776 <LCD_enuWriteNum+0x176>
		Local_u8NumDigit--;
	}
	}
	else
	{
		Local_enuErrorState = LCD_enuDisplayChar('0');
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_enuDisplayChar>
    2774:	8a 87       	std	Y+10, r24	; 0x0a
	}
	return Local_enuErrorState;
    2776:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2778:	2e 96       	adiw	r28, 0x0e	; 14
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <LCD_enuClearLCD>:



ES_t LCD_enuClearLCD()
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	0f 92       	push	r0
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2794:	19 82       	std	Y+1, r1	; 0x01

	LCD_enuSendCommand(0x01);		/* clear display */
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>
	LCD_enuSendCommand(0x80);
    279c:	80 e8       	ldi	r24, 0x80	; 128
    279e:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_enuSendCommand>

	return Local_enuErrorState;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <PORT_enuInit>:




ES_t PORT_enuInit(void)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	0f 92       	push	r0
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
    27b6:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    27b8:	ea e3       	ldi	r30, 0x3A	; 58
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	8f ef       	ldi	r24, 0xFF	; 255
    27be:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    27c0:	e7 e3       	ldi	r30, 0x37	; 55
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    27c8:	e4 e3       	ldi	r30, 0x34	; 52
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 ef       	ldi	r24, 0xF0	; 240
    27ce:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    27d0:	e1 e3       	ldi	r30, 0x31	; 49
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 ef       	ldi	r24, 0xF0	; 240
    27d6:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    27d8:	eb e3       	ldi	r30, 0x3B	; 59
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	10 82       	st	Z, r1
	PORTB =CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    27de:	e8 e3       	ldi	r30, 0x38	; 56
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	10 82       	st	Z, r1
	PORTC =CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    27e4:	e5 e3       	ldi	r30, 0x35	; 53
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	80 83       	st	Z, r24
	PORTD =CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    27ec:	e2 e3       	ldi	r30, 0x32	; 50
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	8f ef       	ldi	r24, 0xFF	; 255
    27f2:	80 83       	st	Z, r24

	Local_enuErrorstate = ES_OK;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <main>:
void func1(void);
void func2(void);
void func3(void);

int main()
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	2f 97       	sbiw	r28, 0x0f	; 15
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
	PORT_enuInit();
    2816:	0e 94 d6 13 	call	0x27ac	; 0x27ac <PORT_enuInit>
	DIO_enuInit();
    281a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuInit>
	LCD_enuInit();
    281e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_enuInit>
	EXTI_enuInit();
    2822:	0e 94 22 0a 	call	0x1444	; 0x1444 <EXTI_enuInit>

	EXTI_enuCallBack(INT0,&func1);
    2826:	26 eb       	ldi	r18, 0xB6	; 182
    2828:	34 e1       	ldi	r19, 0x14	; 20
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	b9 01       	movw	r22, r18
    282e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <EXTI_enuCallBack>
	EXTI_enuCallBack(INT1,&func2);
    2832:	22 e6       	ldi	r18, 0x62	; 98
    2834:	35 e1       	ldi	r19, 0x15	; 21
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	b9 01       	movw	r22, r18
    283a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <EXTI_enuCallBack>
	EXTI_enuCallBack(INT2,&func3);
    283e:	2e e0       	ldi	r18, 0x0E	; 14
    2840:	36 e1       	ldi	r19, 0x16	; 22
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	b9 01       	movw	r22, r18
    2846:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <EXTI_enuCallBack>

	EnableGlobalEnterrupt();
    284a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <EnableGlobalEnterrupt>

	u8 Local_Iterator;
	while(1)
	{
		for(Local_Iterator=0;Local_Iterator<=100;Local_Iterator++)
    284e:	1f 86       	std	Y+15, r1	; 0x0f
    2850:	88 c0       	rjmp	.+272    	; 0x2962 <main+0x160>
		{
			LCD_enuGoToXY(0,0);
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
			LCD_enuWriteNum(Local_Iterator);
    285a:	8f 85       	ldd	r24, Y+15	; 0x0f
    285c:	88 2f       	mov	r24, r24
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	a0 e0       	ldi	r26, 0x00	; 0
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enuWriteNum>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a6 e9       	ldi	r26, 0x96	; 150
    2872:	b3 e4       	ldi	r27, 0x43	; 67
    2874:	8b 87       	std	Y+11, r24	; 0x0b
    2876:	9c 87       	std	Y+12, r25	; 0x0c
    2878:	ad 87       	std	Y+13, r26	; 0x0d
    287a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	6b 85       	ldd	r22, Y+11	; 0x0b
    287e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2880:	8d 85       	ldd	r24, Y+13	; 0x0d
    2882:	9e 85       	ldd	r25, Y+14	; 0x0e
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a e7       	ldi	r20, 0x7A	; 122
    288a:	53 e4       	ldi	r21, 0x43	; 67
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	8f 83       	std	Y+7, r24	; 0x07
    2896:	98 87       	std	Y+8, r25	; 0x08
    2898:	a9 87       	std	Y+9, r26	; 0x09
    289a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <main+0xbc>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	3f c0       	rjmp	.+126    	; 0x293c <main+0x13a>
	else if (__tmp > 65535)
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	4c f5       	brge	.+82     	; 0x2928 <main+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28da:	8d 85       	ldd	r24, Y+13	; 0x0d
    28dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e2       	ldi	r20, 0x20	; 32
    28e4:	51 e4       	ldi	r21, 0x41	; 65
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	9e 83       	std	Y+6, r25	; 0x06
    28fc:	8d 83       	std	Y+5, r24	; 0x05
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <main+0x11c>
    2900:	89 e1       	ldi	r24, 0x19	; 25
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	8b 83       	std	Y+3, r24	; 0x03
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <main+0x10a>
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2914:	8d 81       	ldd	r24, Y+5	; 0x05
    2916:	9e 81       	ldd	r25, Y+6	; 0x06
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	69 f7       	brne	.-38     	; 0x2900 <main+0xfe>
    2926:	14 c0       	rjmp	.+40     	; 0x2950 <main+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9e 83       	std	Y+6, r25	; 0x06
    293a:	8d 83       	std	Y+5, r24	; 0x05
    293c:	8d 81       	ldd	r24, Y+5	; 0x05
    293e:	9e 81       	ldd	r25, Y+6	; 0x06
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <main+0x146>
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			if(Local_Iterator==100)
    2950:	8f 85       	ldd	r24, Y+15	; 0x0f
    2952:	84 36       	cpi	r24, 0x64	; 100
    2954:	19 f4       	brne	.+6      	; 0x295c <main+0x15a>
			{
				Local_Iterator=0;
    2956:	1f 86       	std	Y+15, r1	; 0x0f
				LCD_enuClearLCD();
    2958:	0e 94 c5 13 	call	0x278a	; 0x278a <LCD_enuClearLCD>
	EnableGlobalEnterrupt();

	u8 Local_Iterator;
	while(1)
	{
		for(Local_Iterator=0;Local_Iterator<=100;Local_Iterator++)
    295c:	8f 85       	ldd	r24, Y+15	; 0x0f
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	8f 87       	std	Y+15, r24	; 0x0f
    2962:	8f 85       	ldd	r24, Y+15	; 0x0f
    2964:	85 36       	cpi	r24, 0x65	; 101
    2966:	08 f4       	brcc	.+2      	; 0x296a <main+0x168>
    2968:	74 cf       	rjmp	.-280    	; 0x2852 <main+0x50>
    296a:	71 cf       	rjmp	.-286    	; 0x284e <main+0x4c>

0000296c <func1>:
		}
	}
}

void func1(void)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	2e 97       	sbiw	r28, 0x0e	; 14
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
	DIO_enuTogPinValue(DIO_u8PORTB,DIO_u8PIN1);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_enuTogPinValue>
	LCD_enuGoToXY(1,0);
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuSendString("INT0->");
    2990:	80 e6       	ldi	r24, 0x60	; 96
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_enuSendString>
	a++;
    2998:	80 91 92 00 	lds	r24, 0x0092
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	80 93 92 00 	sts	0x0092, r24
	LCD_enuGoToXY(1,6);
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	66 e0       	ldi	r22, 0x06	; 6
    29a6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuWriteNum(a);
    29aa:	80 91 92 00 	lds	r24, 0x0092
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 e0       	ldi	r26, 0x00	; 0
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enuWriteNum>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	aa ef       	ldi	r26, 0xFA	; 250
    29c4:	b3 e4       	ldi	r27, 0x43	; 67
    29c6:	8b 87       	std	Y+11, r24	; 0x0b
    29c8:	9c 87       	std	Y+12, r25	; 0x0c
    29ca:	ad 87       	std	Y+13, r26	; 0x0d
    29cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	4a e7       	ldi	r20, 0x7A	; 122
    29dc:	53 e4       	ldi	r21, 0x43	; 67
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	8f 83       	std	Y+7, r24	; 0x07
    29e8:	98 87       	std	Y+8, r25	; 0x08
    29ea:	a9 87       	std	Y+9, r26	; 0x09
    29ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <func1+0xa4>
		__ticks = 1;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	3f c0       	rjmp	.+126    	; 0x2a8e <func1+0x122>
	else if (__tmp > 65535)
    2a10:	6f 81       	ldd	r22, Y+7	; 0x07
    2a12:	78 85       	ldd	r23, Y+8	; 0x08
    2a14:	89 85       	ldd	r24, Y+9	; 0x09
    2a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	4c f5       	brge	.+82     	; 0x2a7a <func1+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	51 e4       	ldi	r21, 0x41	; 65
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <func1+0x104>
    2a52:	89 e1       	ldi	r24, 0x19	; 25
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <func1+0xf2>
    2a62:	9c 83       	std	Y+4, r25	; 0x04
    2a64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	9e 81       	ldd	r25, Y+6	; 0x06
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	69 f7       	brne	.-38     	; 0x2a52 <func1+0xe6>
    2a78:	14 c0       	rjmp	.+40     	; 0x2aa2 <func1+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7c:	78 85       	ldd	r23, Y+8	; 0x08
    2a7e:	89 85       	ldd	r24, Y+9	; 0x09
    2a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9e 83       	std	Y+6, r25	; 0x06
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <func1+0x12e>
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_enuGoToXY(1,0);
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuSendString("       ");
    2aaa:	87 e6       	ldi	r24, 0x67	; 103
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_enuSendString>
}
    2ab2:	2e 96       	adiw	r28, 0x0e	; 14
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <func2>:

void func2(void)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	2e 97       	sbiw	r28, 0x0e	; 14
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
	DIO_enuTogPinValue(DIO_u8PORTB,DIO_u8PIN3);
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	63 e0       	ldi	r22, 0x03	; 3
    2adc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_enuTogPinValue>
	LCD_enuGoToXY(1,0);
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuSendString("INT1->");
    2ae8:	8f e6       	ldi	r24, 0x6F	; 111
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_enuSendString>
	b++;
    2af0:	80 91 93 00 	lds	r24, 0x0093
    2af4:	8f 5f       	subi	r24, 0xFF	; 255
    2af6:	80 93 93 00 	sts	0x0093, r24
	LCD_enuGoToXY(1,6);
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	66 e0       	ldi	r22, 0x06	; 6
    2afe:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuWriteNum(b);
    2b02:	80 91 93 00 	lds	r24, 0x0093
    2b06:	88 2f       	mov	r24, r24
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e0       	ldi	r26, 0x00	; 0
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enuWriteNum>
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	aa ef       	ldi	r26, 0xFA	; 250
    2b1c:	b3 e4       	ldi	r27, 0x43	; 67
    2b1e:	8b 87       	std	Y+11, r24	; 0x0b
    2b20:	9c 87       	std	Y+12, r25	; 0x0c
    2b22:	ad 87       	std	Y+13, r26	; 0x0d
    2b24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a e7       	ldi	r20, 0x7A	; 122
    2b34:	53 e4       	ldi	r21, 0x43	; 67
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8f 83       	std	Y+7, r24	; 0x07
    2b40:	98 87       	std	Y+8, r25	; 0x08
    2b42:	a9 87       	std	Y+9, r26	; 0x09
    2b44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b46:	6f 81       	ldd	r22, Y+7	; 0x07
    2b48:	78 85       	ldd	r23, Y+8	; 0x08
    2b4a:	89 85       	ldd	r24, Y+9	; 0x09
    2b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	5f e3       	ldi	r21, 0x3F	; 63
    2b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b5a:	88 23       	and	r24, r24
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <func2+0xa4>
		__ticks = 1;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9e 83       	std	Y+6, r25	; 0x06
    2b64:	8d 83       	std	Y+5, r24	; 0x05
    2b66:	3f c0       	rjmp	.+126    	; 0x2be6 <func2+0x122>
	else if (__tmp > 65535)
    2b68:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6a:	78 85       	ldd	r23, Y+8	; 0x08
    2b6c:	89 85       	ldd	r24, Y+9	; 0x09
    2b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	3f ef       	ldi	r19, 0xFF	; 255
    2b74:	4f e7       	ldi	r20, 0x7F	; 127
    2b76:	57 e4       	ldi	r21, 0x47	; 71
    2b78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7c:	18 16       	cp	r1, r24
    2b7e:	4c f5       	brge	.+82     	; 0x2bd2 <func2+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e2       	ldi	r20, 0x20	; 32
    2b8e:	51 e4       	ldi	r21, 0x41	; 65
    2b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
    2ba8:	0f c0       	rjmp	.+30     	; 0x2bc8 <func2+0x104>
    2baa:	89 e1       	ldi	r24, 0x19	; 25
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	9c 83       	std	Y+4, r25	; 0x04
    2bb0:	8b 83       	std	Y+3, r24	; 0x03
    2bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <func2+0xf2>
    2bba:	9c 83       	std	Y+4, r25	; 0x04
    2bbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bca:	9e 81       	ldd	r25, Y+6	; 0x06
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	69 f7       	brne	.-38     	; 0x2baa <func2+0xe6>
    2bd0:	14 c0       	rjmp	.+40     	; 0x2bfa <func2+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd4:	78 85       	ldd	r23, Y+8	; 0x08
    2bd6:	89 85       	ldd	r24, Y+9	; 0x09
    2bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9e 83       	std	Y+6, r25	; 0x06
    2be4:	8d 83       	std	Y+5, r24	; 0x05
    2be6:	8d 81       	ldd	r24, Y+5	; 0x05
    2be8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bea:	9a 83       	std	Y+2, r25	; 0x02
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <func2+0x12e>
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_enuGoToXY(1,0);
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuSendString("       ");
    2c02:	87 e6       	ldi	r24, 0x67	; 103
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_enuSendString>
}
    2c0a:	2e 96       	adiw	r28, 0x0e	; 14
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <func3>:


void func3(void)
{
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
    2c24:	2e 97       	sbiw	r28, 0x0e	; 14
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
	DIO_enuTogPinValue(DIO_u8PORTB,DIO_u8PIN4);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	64 e0       	ldi	r22, 0x04	; 4
    2c34:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_enuTogPinValue>
	LCD_enuGoToXY(1,0);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	60 e0       	ldi	r22, 0x00	; 0
    2c3c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuSendString("INT2->");
    2c40:	86 e7       	ldi	r24, 0x76	; 118
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_enuSendString>
	c++;
    2c48:	80 91 94 00 	lds	r24, 0x0094
    2c4c:	8f 5f       	subi	r24, 0xFF	; 255
    2c4e:	80 93 94 00 	sts	0x0094, r24
	LCD_enuGoToXY(1,6);
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	66 e0       	ldi	r22, 0x06	; 6
    2c56:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuWriteNum(c);
    2c5a:	80 91 94 00 	lds	r24, 0x0094
    2c5e:	88 2f       	mov	r24, r24
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a0 e0       	ldi	r26, 0x00	; 0
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enuWriteNum>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	aa ef       	ldi	r26, 0xFA	; 250
    2c74:	b3 e4       	ldi	r27, 0x43	; 67
    2c76:	8b 87       	std	Y+11, r24	; 0x0b
    2c78:	9c 87       	std	Y+12, r25	; 0x0c
    2c7a:	ad 87       	std	Y+13, r26	; 0x0d
    2c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4a e7       	ldi	r20, 0x7A	; 122
    2c8c:	53 e4       	ldi	r21, 0x43	; 67
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8f 83       	std	Y+7, r24	; 0x07
    2c98:	98 87       	std	Y+8, r25	; 0x08
    2c9a:	a9 87       	std	Y+9, r26	; 0x09
    2c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca0:	78 85       	ldd	r23, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e8       	ldi	r20, 0x80	; 128
    2cac:	5f e3       	ldi	r21, 0x3F	; 63
    2cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb2:	88 23       	and	r24, r24
    2cb4:	2c f4       	brge	.+10     	; 0x2cc0 <func3+0xa4>
		__ticks = 1;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
    2cbe:	3f c0       	rjmp	.+126    	; 0x2d3e <func3+0x122>
	else if (__tmp > 65535)
    2cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc2:	78 85       	ldd	r23, Y+8	; 0x08
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	3f ef       	ldi	r19, 0xFF	; 255
    2ccc:	4f e7       	ldi	r20, 0x7F	; 127
    2cce:	57 e4       	ldi	r21, 0x47	; 71
    2cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd4:	18 16       	cp	r1, r24
    2cd6:	4c f5       	brge	.+82     	; 0x2d2a <func3+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e2       	ldi	r20, 0x20	; 32
    2ce6:	51 e4       	ldi	r21, 0x41	; 65
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	bc 01       	movw	r22, r24
    2cf2:	cd 01       	movw	r24, r26
    2cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <func3+0x104>
    2d02:	89 e1       	ldi	r24, 0x19	; 25
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <func3+0xf2>
    2d12:	9c 83       	std	Y+4, r25	; 0x04
    2d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
    2d18:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	9e 83       	std	Y+6, r25	; 0x06
    2d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	9e 81       	ldd	r25, Y+6	; 0x06
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	69 f7       	brne	.-38     	; 0x2d02 <func3+0xe6>
    2d28:	14 c0       	rjmp	.+40     	; 0x2d52 <func3+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2c:	78 85       	ldd	r23, Y+8	; 0x08
    2d2e:	89 85       	ldd	r24, Y+9	; 0x09
    2d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
    2d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d40:	9e 81       	ldd	r25, Y+6	; 0x06
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <func3+0x12e>
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_enuGoToXY(1,0);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_enuGoToXY>
	LCD_enuSendString("       ");
    2d5a:	87 e6       	ldi	r24, 0x67	; 103
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_enuSendString>
}
    2d62:	2e 96       	adiw	r28, 0x0e	; 14
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <__mulsi3>:
    2d74:	62 9f       	mul	r22, r18
    2d76:	d0 01       	movw	r26, r0
    2d78:	73 9f       	mul	r23, r19
    2d7a:	f0 01       	movw	r30, r0
    2d7c:	82 9f       	mul	r24, r18
    2d7e:	e0 0d       	add	r30, r0
    2d80:	f1 1d       	adc	r31, r1
    2d82:	64 9f       	mul	r22, r20
    2d84:	e0 0d       	add	r30, r0
    2d86:	f1 1d       	adc	r31, r1
    2d88:	92 9f       	mul	r25, r18
    2d8a:	f0 0d       	add	r31, r0
    2d8c:	83 9f       	mul	r24, r19
    2d8e:	f0 0d       	add	r31, r0
    2d90:	74 9f       	mul	r23, r20
    2d92:	f0 0d       	add	r31, r0
    2d94:	65 9f       	mul	r22, r21
    2d96:	f0 0d       	add	r31, r0
    2d98:	99 27       	eor	r25, r25
    2d9a:	72 9f       	mul	r23, r18
    2d9c:	b0 0d       	add	r27, r0
    2d9e:	e1 1d       	adc	r30, r1
    2da0:	f9 1f       	adc	r31, r25
    2da2:	63 9f       	mul	r22, r19
    2da4:	b0 0d       	add	r27, r0
    2da6:	e1 1d       	adc	r30, r1
    2da8:	f9 1f       	adc	r31, r25
    2daa:	bd 01       	movw	r22, r26
    2dac:	cf 01       	movw	r24, r30
    2dae:	11 24       	eor	r1, r1
    2db0:	08 95       	ret

00002db2 <__udivmodsi4>:
    2db2:	a1 e2       	ldi	r26, 0x21	; 33
    2db4:	1a 2e       	mov	r1, r26
    2db6:	aa 1b       	sub	r26, r26
    2db8:	bb 1b       	sub	r27, r27
    2dba:	fd 01       	movw	r30, r26
    2dbc:	0d c0       	rjmp	.+26     	; 0x2dd8 <__udivmodsi4_ep>

00002dbe <__udivmodsi4_loop>:
    2dbe:	aa 1f       	adc	r26, r26
    2dc0:	bb 1f       	adc	r27, r27
    2dc2:	ee 1f       	adc	r30, r30
    2dc4:	ff 1f       	adc	r31, r31
    2dc6:	a2 17       	cp	r26, r18
    2dc8:	b3 07       	cpc	r27, r19
    2dca:	e4 07       	cpc	r30, r20
    2dcc:	f5 07       	cpc	r31, r21
    2dce:	20 f0       	brcs	.+8      	; 0x2dd8 <__udivmodsi4_ep>
    2dd0:	a2 1b       	sub	r26, r18
    2dd2:	b3 0b       	sbc	r27, r19
    2dd4:	e4 0b       	sbc	r30, r20
    2dd6:	f5 0b       	sbc	r31, r21

00002dd8 <__udivmodsi4_ep>:
    2dd8:	66 1f       	adc	r22, r22
    2dda:	77 1f       	adc	r23, r23
    2ddc:	88 1f       	adc	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	1a 94       	dec	r1
    2de2:	69 f7       	brne	.-38     	; 0x2dbe <__udivmodsi4_loop>
    2de4:	60 95       	com	r22
    2de6:	70 95       	com	r23
    2de8:	80 95       	com	r24
    2dea:	90 95       	com	r25
    2dec:	9b 01       	movw	r18, r22
    2dee:	ac 01       	movw	r20, r24
    2df0:	bd 01       	movw	r22, r26
    2df2:	cf 01       	movw	r24, r30
    2df4:	08 95       	ret

00002df6 <__divmodsi4>:
    2df6:	97 fb       	bst	r25, 7
    2df8:	09 2e       	mov	r0, r25
    2dfa:	05 26       	eor	r0, r21
    2dfc:	0e d0       	rcall	.+28     	; 0x2e1a <__divmodsi4_neg1>
    2dfe:	57 fd       	sbrc	r21, 7
    2e00:	04 d0       	rcall	.+8      	; 0x2e0a <__divmodsi4_neg2>
    2e02:	d7 df       	rcall	.-82     	; 0x2db2 <__udivmodsi4>
    2e04:	0a d0       	rcall	.+20     	; 0x2e1a <__divmodsi4_neg1>
    2e06:	00 1c       	adc	r0, r0
    2e08:	38 f4       	brcc	.+14     	; 0x2e18 <__divmodsi4_exit>

00002e0a <__divmodsi4_neg2>:
    2e0a:	50 95       	com	r21
    2e0c:	40 95       	com	r20
    2e0e:	30 95       	com	r19
    2e10:	21 95       	neg	r18
    2e12:	3f 4f       	sbci	r19, 0xFF	; 255
    2e14:	4f 4f       	sbci	r20, 0xFF	; 255
    2e16:	5f 4f       	sbci	r21, 0xFF	; 255

00002e18 <__divmodsi4_exit>:
    2e18:	08 95       	ret

00002e1a <__divmodsi4_neg1>:
    2e1a:	f6 f7       	brtc	.-4      	; 0x2e18 <__divmodsi4_exit>
    2e1c:	90 95       	com	r25
    2e1e:	80 95       	com	r24
    2e20:	70 95       	com	r23
    2e22:	61 95       	neg	r22
    2e24:	7f 4f       	sbci	r23, 0xFF	; 255
    2e26:	8f 4f       	sbci	r24, 0xFF	; 255
    2e28:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2a:	08 95       	ret

00002e2c <__prologue_saves__>:
    2e2c:	2f 92       	push	r2
    2e2e:	3f 92       	push	r3
    2e30:	4f 92       	push	r4
    2e32:	5f 92       	push	r5
    2e34:	6f 92       	push	r6
    2e36:	7f 92       	push	r7
    2e38:	8f 92       	push	r8
    2e3a:	9f 92       	push	r9
    2e3c:	af 92       	push	r10
    2e3e:	bf 92       	push	r11
    2e40:	cf 92       	push	r12
    2e42:	df 92       	push	r13
    2e44:	ef 92       	push	r14
    2e46:	ff 92       	push	r15
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	ca 1b       	sub	r28, r26
    2e56:	db 0b       	sbc	r29, r27
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	09 94       	ijmp

00002e64 <__epilogue_restores__>:
    2e64:	2a 88       	ldd	r2, Y+18	; 0x12
    2e66:	39 88       	ldd	r3, Y+17	; 0x11
    2e68:	48 88       	ldd	r4, Y+16	; 0x10
    2e6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e70:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e72:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e74:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e76:	b9 84       	ldd	r11, Y+9	; 0x09
    2e78:	c8 84       	ldd	r12, Y+8	; 0x08
    2e7a:	df 80       	ldd	r13, Y+7	; 0x07
    2e7c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e7e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e80:	0c 81       	ldd	r16, Y+4	; 0x04
    2e82:	1b 81       	ldd	r17, Y+3	; 0x03
    2e84:	aa 81       	ldd	r26, Y+2	; 0x02
    2e86:	b9 81       	ldd	r27, Y+1	; 0x01
    2e88:	ce 0f       	add	r28, r30
    2e8a:	d1 1d       	adc	r29, r1
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	ed 01       	movw	r28, r26
    2e98:	08 95       	ret

00002e9a <_exit>:
    2e9a:	f8 94       	cli

00002e9c <__stop_program>:
    2e9c:	ff cf       	rjmp	.-2      	; 0x2e9c <__stop_program>
